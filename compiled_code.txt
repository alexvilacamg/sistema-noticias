ESTRUTURA DO DIRETÓRIO:
================================================================================

├── .env.example
├── .gitignore
├── .phpunit.result.cache
├── README.md
├── background_scrape.php
├── check_dates.php
├── check_field_names.php
├── compile_code.py
├── compiled_code.txt
├── composer.json
├── composer.lock
├── config
│   ├── config.example.php
│   ├── config.php
│   └── scrapers_config.php
├── create_sqlite_indexes.php
├── database.sqlite
├── migrate_data.php
├── normalize_fields.php
├── phpunit.xml
├── public
│   ├── api
│   │   ├── cache.php
│   │   ├── force_update.php
│   │   └── news.php
│   ├── assets
│   │   ├── css
│   │   │   ├── admin.css
│   │   │   ├── cards.css
│   │   │   ├── dark-mode.css
│   │   │   ├── logs.css
│   │   │   ├── main.css
│   │   │   └── table.css
│   │   └── js
│   │       ├── admin.js
│   │       ├── dark-mode.js
│   │       ├── logs.js
│   │       ├── main.js
│   │       ├── scraper.js
│   │       ├── universal-search.js
│   │       └── view-switcher.js
│   ├── css
│   │   └── style.css
│   ├── index.php
│   └── js
│       └── script.js
├── src
│   └── App
│       ├── Cache
│       │   ├── CacheFactory.php
│       │   ├── CacheInterface.php
│       │   ├── CacheManager.php
│       │   ├── FileCache.php
│       │   ├── MemcachedCache.php
│       │   └── RedisCache.php
│       ├── Controllers
│       │   ├── AdminController.php
│       │   └── NewsController.php
│       ├── Factories
│       │   ├── RepositoryFactory.php
│       │   └── ScraperFactory.php
│       ├── Models
│       │   ├── AbstractNewsScraper.php
│       │   ├── FolhaScraper.php
│       │   ├── G1Scraper.php
│       │   ├── NewsScraperInterface.php
│       │   ├── Scraper.php
│       │   └── UOLScraper.php
│       ├── Repositories
│       │   ├── MysqlNewsRepository.php
│       │   ├── NewsRepositoryInterface.php
│       │   └── SqliteNewsRepository.php
│       ├── Utils
│       │   ├── HttpClient.php
│       │   └── Logger.php
│       └── Views
│           ├── Helpers
│           │   └── ViewHelper.php
│           ├── admin.php
│           └── index.php
├── test-redis.php
├── test_db_connection.php
├── test_search.php
└── tests
    ├── Cache
    │   ├── FileCacheTest.php
    │   └── RedisCacheTest.php
    ├── Repositories
    │   └── NewsRepositoryTest.php
    ├── Scrapers
    │   ├── G1ScraperTest.php
    │   └── UOLScraperTest.php
    ├── TestCase.php
    ├── TestData
    │   ├── folha_sample.html
    │   ├── g1_sample.html
    │   └── uol_sample.html
    └── temp
        ├── .gitkeep
        ├── cache_test_67fac04f00e85test_8c32d1183251df9828f929b935ae0419.cache
        ├── cache_test_67fac04f03079test_bfbcaeebdd80b99dd4d72414d41f564e.cache
        └── cache_test_67fac0510eef4test_cdbdc580eadbc0455a846c1680a056c2.cache

================================================================================
CONTEÚDO DOS ARQUIVOS:
================================================================================

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\background_scrape.php
================================================================================

<?php
// background_scrape.php

// Carrega o autoloader do Composer
require_once __DIR__ . '/vendor/autoload.php';

use App\Models\Scraper;

$scraper = new Scraper();
$articles = $scraper->getAllPoliticalNews();

$cacheFile = __DIR__ . '/cache/all_news.json';
if (!is_dir(__DIR__ . '/cache')) {
    mkdir(__DIR__ . '/cache', 0777, true);
}

file_put_contents($cacheFile, json_encode($articles));
echo "Scraping concluído com sucesso!";
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\check_dates.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\check_dates.php

require_once __DIR__ . '/vendor/autoload.php';

try {
    // Conectar ao SQLite
    $db = new PDO("sqlite:" . __DIR__ . '/database.sqlite');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Buscar e mostrar as datas
    $stmt = $db->query("SELECT title, published_at FROM news LIMIT 20");
    
    echo "FORMATO DAS DATAS NO BANCO:\n";
    echo "====================================\n";
    
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        echo "Título: " . substr($row['title'], 0, 30) . "...\n";
        echo "Data Raw: [" . $row['published_at'] . "]\n";
        echo "strtotime: " . (strtotime($row['published_at']) ? 'OK' : 'FALHA') . "\n";
        echo "====================================\n";
    }
} catch (Exception $e) {
    echo "Erro: " . $e->getMessage();
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\check_field_names.php
================================================================================

<?php
require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

echo "=== VERIFICAÇÃO DE NOMENCLATURA ===\n";

try {
    // Obter o repositório
    $repository = App\Factories\RepositoryFactory::createNewsRepository();
    
    // Buscar todas as notícias
    $news = $repository->getAll();
    
    echo "Analisando " . count($news) . " notícias...\n";
    $withPublishedAt = 0;
    $withPublishedAtSnakeCase = 0;
    
    foreach ($news as $index => $item) {
        echo "Notícia #" . ($index + 1) . ": ";
        echo "'" . substr($item['title'], 0, 30) . "...'\n";
        
        // Verificar campos
        echo "   - ";
        if (array_key_exists('publishedAt', $item)) {
            echo "Usa 'publishedAt' (camelCase)\n";
            $withPublishedAt++;
        }
        if (array_key_exists('published_at', $item)) {
            echo "Usa 'published_at' (snake_case)\n";
            $withPublishedAtSnakeCase++;
        }
        if (!array_key_exists('publishedAt', $item) && !array_key_exists('published_at', $item)) {
            echo "ERRO: Nenhum campo de data encontrado!\n";
        }
    }
    
    echo "\n=== RESULTADO DA VERIFICAÇÃO ===\n";
    echo "Total de notícias: " . count($news) . "\n";
    echo "Com 'publishedAt' (camelCase): $withPublishedAt\n";
    echo "Com 'published_at' (snake_case): $withPublishedAtSnakeCase\n";
    
    if ($withPublishedAt > 0) {
        echo "\nATENÇÃO: Ainda existem $withPublishedAt notícias usando o formato antigo 'publishedAt'.\n";
        echo "Execute o script normalize_fields.php para completar a migração.\n";
    } else {
        echo "\nTodas as notícias estão usando o formato padronizado 'published_at'. ✓\n";
    }
    
} catch (Exception $e) {
    echo "ERRO: " . $e->getMessage() . "\n";
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\composer.json
================================================================================

{
    "name": "alexa/sistema-noticias",
    "description": "Sistema de agregação de notícias políticas",
    "type": "project",
    "require": {
        "php": ">=7.4",
        "predis/predis": "^2.3",
        "vlucas/phpdotenv": "^5.6",
        "illuminate/database": "^12.8"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "mockery/mockery": "^1.4"
    },
    "autoload": {
        "psr-4": {
            "App\\": "src/App/",
            "App\\Repositories\\": "src/App/Repositories/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "authors": [
        {
            "name": "Alex Vilaça",
            "email": "alexandrevilaca.jor@gmail.com"
        }
    ],
    "scripts": {
        "test": "vendor\\bin\\phpunit",
        "test:cache": "vendor\\bin\\phpunit --testsuite Cache",
        "test:scrapers": "vendor\\bin\\phpunit --testsuite Scrapers"
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\create_sqlite_indexes.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\create_sqlite_indexes.php

require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

echo "Criando índices para SQLite...\n";

try {
    $dbPath = __DIR__ . '/database.sqlite';
    $db = new PDO("sqlite:$dbPath");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Índice para buscas por título
    echo "Criando índice para título...\n";
    $db->exec("CREATE INDEX IF NOT EXISTS idx_news_title ON news(title)");
    
    // Índice composto para filtragem por fonte e data
    echo "Criando índice composto para fonte e data...\n";
    $db->exec("CREATE INDEX IF NOT EXISTS idx_news_source_date ON news(source, published_at)");
    
    // Criar tabela virtual FTS5 para busca em texto completo
    echo "Criando tabela FTS5 para busca em texto completo...\n";
    $db->exec("
    CREATE VIRTUAL TABLE IF NOT EXISTS news_fts USING fts5(
        title, description, content='news', content_rowid='id'
    )");
    
    // Verificar se a tabela FTS já tem dados
    $count = $db->query("SELECT COUNT(*) FROM news_fts")->fetchColumn();
    
    if ($count == 0) {
        echo "Populando tabela FTS com dados existentes...\n";
        // Preencher a tabela FTS com os dados existentes
        $db->exec("
        INSERT INTO news_fts(rowid, title, description)
        SELECT id, title, description FROM news
        ");
    }
    
    // Criar trigger para manter a tabela FTS atualizada em inserções
    $db->exec("
    CREATE TRIGGER IF NOT EXISTS news_ai AFTER INSERT ON news BEGIN
        INSERT INTO news_fts(rowid, title, description)
        VALUES (new.id, new.title, new.description);
    END;
    ");
    
    // Criar trigger para manter a tabela FTS atualizada em atualizações
    $db->exec("
    CREATE TRIGGER IF NOT EXISTS news_au AFTER UPDATE ON news BEGIN
        UPDATE news_fts SET
            title = new.title,
            description = new.description
        WHERE rowid = old.id;
    END;
    ");
    
    // Criar trigger para manter a tabela FTS atualizada em exclusões
    $db->exec("
    CREATE TRIGGER IF NOT EXISTS news_ad AFTER DELETE ON news BEGIN
        DELETE FROM news_fts WHERE rowid = old.id;
    END;
    ");
    
    echo "Índices criados com sucesso!\n";
    
} catch (Exception $e) {
    echo "ERRO: " . $e->getMessage() . "\n";
    echo "Trace: \n" . $e->getTraceAsString() . "\n";
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\migrate_data.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\migrate_data.php

require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

use App\Factories\RepositoryFactory;
use App\Utils\Logger;

// Função para a migração
function migrateData() {
    echo "Iniciando migração de dados...\n";
    
    $cacheFile = __DIR__ . '/cache/all_news.json';
    if (!file_exists($cacheFile)) {
        echo "Arquivo de cache não encontrado. Nada para migrar.\n";
        return false;
    }
    
    try {
        $repository = RepositoryFactory::createNewsRepository();
        
        // Carregar dados do arquivo JSON
        $jsonData = file_get_contents($cacheFile);
        $newsItems = json_decode($jsonData, true);
        
        if (!$newsItems || !is_array($newsItems)) {
            echo "O arquivo de cache está vazio ou inválido.\n";
            return false;
        }
        
        echo "Encontradas " . count($newsItems) . " notícias para migrar...\n";
        
        // Salvar no banco de dados
        $result = $repository->saveMany($newsItems);
        
        if ($result) {
            echo "Migração concluída com sucesso!\n";
            // Renomear o arquivo original para backup
            rename($cacheFile, $cacheFile . '.bak');
            echo "Backup do arquivo original criado como {$cacheFile}.bak\n";
        } else {
            echo "Falha na migração. Verifique os logs.\n";
        }
        
        return $result;
    } catch (Exception $e) {
        echo "Erro durante a migração: " . $e->getMessage() . "\n";
        Logger::error("Erro na migração: " . $e->getMessage(), "Migration");
        return false;
    }
}

// Executar a migração
migrateData();

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\normalize_fields.php
================================================================================

<?php
// Script para normalizar as inconsistências de nomenclatura no banco de dados

require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

use App\Utils\Logger;

echo "=== NORMALIZAÇÃO DE CAMPOS DO BANCO DE DADOS ===\n";
echo "Padronizando nomenclatura de publishedAt para published_at...\n\n";

try {
    // Conectar ao banco de dados
    $repository = App\Factories\RepositoryFactory::createNewsRepository();
    $dbType = getenv('DB_TYPE') ?: 'sqlite';
    
    if ($dbType === 'sqlite') {
        // Migração específica para SQLite
        $dbPath = __DIR__ . '/database.sqlite';
        $db = new PDO("sqlite:$dbPath");
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Buscar notícias com publishedAt em vez de published_at
        $stmt = $db->query("SELECT * FROM news");
        $news = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo "Encontradas " . count($news) . " notícias no banco de dados.\n";
        
        $updatedCount = 0;
        $emptyCount = 0;
        
        // Verificar cada notícia
        foreach ($news as $item) {
            $needsUpdate = false;
            $published_at = $item['published_at'] ?? null;
            
            // Verificar campos nulos ou vazios
            if (empty($published_at) || $published_at === '1970-01-01T00:00:00+00:00') {
                echo "ID " . $item['id'] . ": Campo published_at vazio ou inválido.\n";
                $needsUpdate = true;
                $emptyCount++;
            }
            
            if ($needsUpdate) {
                $updatedCount++;
                
                // Atualizar com data atual
                $stmt = $db->prepare("UPDATE news SET published_at = :date WHERE id = :id");
                $stmt->bindValue(':date', date('Y-m-d H:i:s'));
                $stmt->bindValue(':id', $item['id']);
                $stmt->execute();
            }
        }
        
        echo "\nRelatório de Normalização:\n";
        echo "- Total de registros processados: " . count($news) . "\n";
        echo "- Registros atualizados: $updatedCount\n";
        echo "- Campos vazios corrigidos: $emptyCount\n";
        
    } else if ($dbType === 'mysql') {
        echo "Executando migração para MySQL...\n";
        // Implemente código específico para MySQL aqui
    }
    
    echo "\nNormalização concluída com sucesso!\n";
    
} catch (Exception $e) {
    echo "ERRO: " . $e->getMessage() . "\n";
    Logger::error('Erro na normalização de campos: ' . $e->getMessage(), 'Migration');
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\test-redis.php
================================================================================

<?php
// Salve como test-redis.php na raiz do projeto
require_once __DIR__ . '/vendor/autoload.php';

try {
    $redis = new \Predis\Client();
    echo "Conectando ao Redis...\n";
    
    // Tenta um comando simples
    $redis->set('test_key', 'Hello Redis!');
    $value = $redis->get('test_key');
    
    echo "Valor recuperado: $value\n";
    echo "Redis está funcionando corretamente!\n";
} catch (Exception $e) {
    echo "Erro: " . $e->getMessage() . "\n";
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\test_db_connection.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\test_db_connection.php

require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

echo "Testando conexão com o banco de dados...\n";
echo "Tipo: " . (getenv('DB_TYPE') ?: 'mysql') . "\n";
echo "Host: " . (getenv('DB_HOST') ?: '127.0.0.1') . "\n";
echo "Porta: " . (getenv('DB_PORT') ?: (getenv('DB_TYPE') == 'mongodb' ? '27017' : '3306')) . "\n";
echo "Banco: " . (getenv('DB_DATABASE') ?: 'sistema_noticias') . "\n\n";

try {
    $repository = App\Factories\RepositoryFactory::createNewsRepository();
    
    // Fazer uma operação simples para testar
    $allNews = $repository->getAll();
    
    echo "Conexão estabelecida com sucesso!\n";
    echo "Total de notícias no banco: " . count($allNews) . "\n";
    
    echo "\nDetalhes da primeira notícia:\n";
    if (!empty($allNews)) {
        print_r($allNews[0]);
    } else {
        echo "Não há notícias no banco ainda.\n";
    }
} catch (Exception $e) {
    echo "ERRO: " . $e->getMessage() . "\n";
    echo "Trace: \n" . $e->getTraceAsString() . "\n";
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\test_search.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\test_search.php

require_once __DIR__ . '/vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->safeLoad();

// Termo de pesquisa do argumento da linha de comando
$searchTerm = $argv[1] ?? 'política';

echo "Pesquisando por: '$searchTerm'\n\n";

try {
    $repository = App\Factories\RepositoryFactory::createNewsRepository();
    
    // Pesquisa usando o novo filtro
    $results = $repository->getAll(['search' => $searchTerm]);
    
    echo "Resultados encontrados: " . count($results) . "\n\n";
    
    // Exibe os 5 primeiros resultados
    foreach (array_slice($results, 0, 5) as $index => $news) {
        echo ($index + 1) . ". " . $news['title'] . "\n";
        echo "   Fonte: " . $news['source'] . " | Data: " . $news['published_at'] . "\n";
        echo "   URL: " . $news['url'] . "\n\n";
    }
    
} catch (Exception $e) {
    echo "ERRO: " . $e->getMessage() . "\n";
    echo "Trace: \n" . $e->getTraceAsString() . "\n";
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\config\config.example.php
================================================================================

<?php
date_default_timezone_set('America/Sao_Paulo');
define('CACHE_DIR', __DIR__ . '/../cache');
define('LOG_DIR', __DIR__ . '/../logs');
if (!is_dir(LOG_DIR)) {
    mkdir(LOG_DIR, 0777, true);
}
define('LOG_FILE', LOG_DIR . '/debug.log');

// Define constantes para níveis de log apenas se não estiverem definidas
if (!defined('LOG_INFO'))    define('LOG_INFO', 'INFO');
if (!defined('LOG_WARNING')) define('LOG_WARNING', 'WARNING');
if (!defined('LOG_ERROR'))   define('LOG_ERROR', 'ERROR');
if (!defined('LOG_DEBUG'))   define('LOG_DEBUG', 'DEBUG');

/**
 * Função aprimorada de log com suporte a níveis
 * 
 * @param string $message Mensagem a ser registrada
 * @param string $level Nível do log (INFO, WARNING, ERROR, DEBUG)
 * @param string $context Contexto opcional para o log
 * @return bool Sucesso da operação
 */
function debug_log($message, $level = 'INFO', $context = '') {
    $date = date("Y-m-d H:i:s");
    $contextInfo = $context ? "[$context]" : "";
    // Formato corrigido: [DATA][NÍVEL]mensagem (sem quebras de linha no nível)
    $entry = "[$date][$level]$contextInfo $message" . PHP_EOL;
    return file_put_contents(LOG_FILE, $entry, FILE_APPEND);
}

/**
 * Funções auxiliares para simplificar os logs em diferentes níveis
 * Cada função é definida apenas se não existir
 */
if (!function_exists('log_info')) {
    function log_info($message, $context = '') {
        return debug_log($message, LOG_INFO, $context);
    }
}

if (!function_exists('log_warning')) {
    function log_warning($message, $context = '') {
        return debug_log($message, LOG_WARNING, $context);
    }
}

if (!function_exists('log_error')) {
    function log_error($message, $context = '') {
        return debug_log($message, LOG_ERROR, $context);
    }
}

if (!function_exists('log_debug')) {
    function log_debug($message, $context = '') {
        return debug_log($message, LOG_DEBUG, $context);
    }
}

/**
 * Configurações de Cache - SUBSTITUA COM SUAS CREDENCIAIS
 */
define('CACHE_TYPE', 'file'); // 'redis', 'memcached', ou 'file'
define('CACHE_PREFIX', 'news_');
define('CACHE_TTL', 600); // 10 minutos

// Configurações Redis - SUBSTITUA COM SUAS CREDENCIAIS
define('REDIS_HOST', '127.0.0.1');
define('REDIS_PORT', 6379);
define('REDIS_PASSWORD', null); // Altere para sua senha
define('REDIS_DATABASE', 0);

// Configurações Memcached - SUBSTITUA COM SUAS CREDENCIAIS
define('MEMCACHED_HOST', '127.0.0.1');
define('MEMCACHED_PORT', 11211);

/**
 * Função para obter a instância de cache
 * 
 * @return App\Cache\CacheInterface
 */
function getCache()
{
    static $cache = null;
    
    if ($cache === null) {
        $config = [
            'prefix' => CACHE_PREFIX,
            'ttl' => CACHE_TTL,
            'directory' => CACHE_DIR . '/data/',
        ];
        
        // Adiciona configurações específicas dependendo do tipo
        switch (CACHE_TYPE) {
            case 'redis':
                $config['host'] = REDIS_HOST;
                $config['port'] = REDIS_PORT;
                $config['password'] = REDIS_PASSWORD;
                $config['database'] = REDIS_DATABASE;
                break;
                
            case 'memcached':
                $config['servers'] = [
                    [
                        'host' => MEMCACHED_HOST,
                        'port' => MEMCACHED_PORT,
                        'weight' => 100
                    ]
                ];
                break;
        }
        
        // Utiliza a fábrica para criar a implementação
        $cache = \App\Cache\CacheFactory::create(CACHE_TYPE, $config);
    }
    
    return $cache;
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\config\config.php
================================================================================

<?php
date_default_timezone_set('America/Sao_Paulo');
define('CACHE_DIR', __DIR__ . '/../cache');
define('LOG_DIR', __DIR__ . '/../logs');
if (!is_dir(LOG_DIR)) {
    mkdir(LOG_DIR, 0777, true);
}
define('LOG_FILE', LOG_DIR . '/debug.log');

// Usa variáveis de ambiente ou valores padrão
define('CACHE_TYPE', getenv('CACHE_TYPE') ?: 'file');
define('CACHE_PREFIX', getenv('CACHE_PREFIX') ?: 'news_');
define('CACHE_TTL', getenv('CACHE_TTL') ?: 600);

define('REDIS_HOST', getenv('REDIS_HOST') ?: '127.0.0.1');
define('REDIS_PORT', getenv('REDIS_PORT') ?: 6379);
define('REDIS_PASSWORD', getenv('REDIS_PASSWORD') ?: null);
define('REDIS_DATABASE', getenv('REDIS_DATABASE') ?: 0);

define('MEMCACHED_HOST', getenv('MEMCACHED_HOST') ?: '127.0.0.1');
define('MEMCACHED_PORT', getenv('MEMCACHED_PORT') ?: 11211);

// Modificar config.php para incluir configuração SQLite
define('DB_TYPE', 'sqlite');
define('DB_PATH', __DIR__ . '/../database.sqlite');

// Define constantes para níveis de log apenas se não estiverem definidas
if (!defined('LOG_INFO'))    define('LOG_INFO', 'INFO');
if (!defined('LOG_WARNING')) define('LOG_WARNING', 'WARNING');
if (!defined('LOG_ERROR'))   define('LOG_ERROR', 'ERROR');
if (!defined('LOG_DEBUG'))   define('LOG_DEBUG', 'DEBUG');

/**
 * Função aprimorada de log com suporte a níveis
 * 
 * @param string $message Mensagem a ser registrada
 * @param string $level Nível do log (INFO, WARNING, ERROR, DEBUG)
 * @param string $context Contexto opcional para o log
 * @return bool Sucesso da operação
 */
function debug_log($message, $level = 'INFO', $context = '') {
    $date = date("Y-m-d H:i:s");
    $contextInfo = $context ? "[$context]" : "";
    // Formato corrigido: [DATA][NÍVEL]mensagem (sem quebras de linha no nível)
    $entry = "[$date][$level]$contextInfo $message" . PHP_EOL;
    return file_put_contents(LOG_FILE, $entry, FILE_APPEND);
}

/**
 * Funções auxiliares para simplificar os logs em diferentes níveis
 * Cada função é definida apenas se não existir
 */
if (!function_exists('log_info')) {
    function log_info($message, $context = '') {
        return debug_log($message, LOG_INFO, $context);
    }
}

if (!function_exists('log_warning')) {
    function log_warning($message, $context = '') {
        return debug_log($message, LOG_WARNING, $context);
    }
}

if (!function_exists('log_error')) {
    function log_error($message, $context = '') {
        return debug_log($message, LOG_ERROR, $context);
    }
}

if (!function_exists('log_debug')) {
    function log_debug($message, $context = '') {
        return debug_log($message, LOG_DEBUG, $context);
    }
}

/**
 * Função para obter a instância de cache
 * 
 * @return App\Cache\CacheInterface
 */
function getCache()
{
    static $cache = null;
    
    if ($cache === null) {
        $config = [
            'prefix' => CACHE_PREFIX,
            'ttl' => CACHE_TTL,
            'directory' => CACHE_DIR . '/data/',
        ];
        
        // Adiciona configurações específicas dependendo do tipo
        switch (CACHE_TYPE) {
            case 'redis':
                $config['host'] = REDIS_HOST;
                $config['port'] = REDIS_PORT;
                $config['password'] = REDIS_PASSWORD;
                $config['database'] = REDIS_DATABASE;
                break;
                
            case 'memcached':
                $config['servers'] = [
                    [
                        'host' => MEMCACHED_HOST,
                        'port' => MEMCACHED_PORT,
                        'weight' => 100
                    ]
                ];
                break;
        }
        
        // Utiliza a fábrica para criar a implementação
        $cache = \App\Cache\CacheFactory::create(CACHE_TYPE, $config);
    }
    
    return $cache;
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\config\scrapers_config.php
================================================================================

<?php
/**
 * Lista de classes que representam cada portal.
 * Apenas o nome da classe, sem namespace.
 * O namespace App\Models\ será adicionado automaticamente.
 */
return [
    'G1Scraper',
    'UOLScraper',
    'FolhaScraper',    
    // Adicione aqui novos scrapers, ex: 'PortalXYZScraper',
];


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\index.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\index.php

// Carregar o autoloader do Composer
require_once __DIR__ . '/../vendor/autoload.php';

// Carregar variáveis de ambiente
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->safeLoad(); // Não falha se .env não existir

// Roteamento básico
$path = $_SERVER['REQUEST_URI'];
// Remover query string se existir
if (($pos = strpos($path, '?')) !== false) {
    $path = substr($path, 0, $pos);
}
$path = rtrim($path, '/');

// Roteamento simples
switch ($path) {
    case '/admin':
        // Usa o novo controlador administrativo
        $controller = new App\Controllers\AdminController();
        $controller->index();
        break;
        
    case '':
    case '/':
    default:
        // Usa o controlador de notícias normal
        $controller = new App\Controllers\NewsController();
        $controller->index();
        break;
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\api\cache.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\api\cache.php

require_once __DIR__ . '/../../vendor/autoload.php';

use App\Cache\CacheManager;
use App\Utils\Logger;

header('Content-Type: application/json');

// Verifica se é uma solicitação POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    
    switch ($action) {
        case 'clear':
            $result = CacheManager::clearNewsCache();
            echo json_encode([
                'success' => $result,
                'message' => $result ? 'Cache limpo com sucesso' : 'Falha ao limpar o cache'
            ]);
            break;
            
        case 'warm':
            $result = CacheManager::warmNewsCache();
            echo json_encode([
                'success' => $result,
                'message' => $result ? 'Cache pré-aquecido com sucesso' : 'Falha ao pré-aquecer o cache'
            ]);
            break;
            
        default:
            echo json_encode([
                'success' => false,
                'message' => 'Ação desconhecida'
            ]);
    }
} else {
    // Para solicitações GET, retorna estatísticas
    $stats = CacheManager::getStats();
    echo json_encode([
        'success' => true,
        'stats' => $stats
    ]);
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\api\force_update.php
================================================================================

<?php
// Desabilitar o limite de tempo de execução do script
set_time_limit(0);

// Configurações iniciais para garantir que a saída seja enviada corretamente
ini_set('output_buffering', 'off');
ini_set('zlib.output_compression', false);

// Headers específicos para Server-Sent Events
header('Content-Type: text/event-stream');
header('Cache-Control: no-cache');
header('Connection: keep-alive');
header('X-Accel-Buffering: no'); // Para servidores Nginx

// Desativa qualquer buffer de saída para garantir envio imediato
@ob_end_clean();
if (ob_get_level() == 0) ob_start();

// Carrega o autoloader do Composer
require_once __DIR__ . '/../../vendor/autoload.php';

// Usa o namespace correto
use App\Models\Scraper;
use App\Utils\Logger;

// Função para enviar evento para o cliente
function sendEvent($message, $type = "progress") {
    echo "event: {$type}\n";
    echo "data: " . json_encode($message) . "\n\n";
    ob_flush();
    flush();
}

// Envia um heartbeat a cada 15 segundos para manter a conexão viva
function startHeartbeat() {
    ignore_user_abort(true); // continua executando mesmo se o cliente desconectar
    
    register_shutdown_function(function() {
        // Envia um evento de erro se o script terminar inesperadamente
        sendEvent(['status' => 'error', 'message' => 'O servidor finalizou a conexão inesperadamente'], 'error');
    });
    
    // Inicia o heartbeat
    $lastHeartbeat = time();
    return $lastHeartbeat;
}

// Inicia o heartbeat
$lastHeartbeat = startHeartbeat();

try {
    // Envia mensagem inicial
    sendEvent(['status' => 'start', 'message' => 'Iniciando processo de atualização...'], 'start');
    
    // Registra o início do processo para calcular o tempo total
    $startTime = microtime(true);
    
    // Define um callback personalizado para o Scraper que também verifica heartbeat
    $progressCallback = function($message) use (&$lastHeartbeat) {
        // Envia update de progresso
        sendEvent(['status' => 'progress', 'message' => $message]);
        
        // Verifica se precisa enviar heartbeat (a cada 15 segundos)
        $now = time();
        if ($now - $lastHeartbeat >= 15) {
            sendEvent(['status' => 'heartbeat', 'timestamp' => $now], 'heartbeat');
            $lastHeartbeat = $now;
        }
    };
    
    // Instancia o scraper com o callback personalizado
    $scraper = new Scraper($progressCallback);
    
    // Envia mensagem antes de começar o scraping
    sendEvent(['status' => 'progress', 'message' => 'Iniciando scraping dos portais de notícias...']);
    
    // Força a atualização do scraping
    $articles = $scraper->getAllPoliticalNews(true);
    
    // Cria o diretório de cache se não existir
    $cacheDir = __DIR__ . '/../../cache';
    if (!is_dir($cacheDir)) {
        mkdir($cacheDir, 0777, true);
        sendEvent(['status' => 'progress', 'message' => 'Diretório de cache criado']);
    }
    
    // Salva os artigos no cache
    $cacheFile = $cacheDir . '/all_news.json';
    $articlesCount = count($articles);
    sendEvent(['status' => 'progress', 'message' => "Salvando {$articlesCount} artigos no cache..."]);
    file_put_contents($cacheFile, json_encode($articles));
    
    // Calcula estatísticas
    $endTime = microtime(true);
    $executionTime = round($endTime - $startTime, 2);
    
    // Contagem por fonte
    $sourceStats = [];
    foreach ($articles as $article) {
        $source = $article['source'] ?? 'Desconhecido';
        if (!isset($sourceStats[$source])) {
            $sourceStats[$source] = 0;
        }
        $sourceStats[$source]++;
    }
    
    // Envia mensagem de conclusão
    sendEvent([
        'status' => 'success',
        'message' => 'Atualização realizada com sucesso!',
        'articles_count' => $articlesCount,
        'execution_time' => $executionTime,
        'sources' => $sourceStats,
        'cache_size' => filesize($cacheFile),
        'timestamp' => date('Y-m-d H:i:s')
    ], 'complete');
    
} catch (\Exception $e) { // Note o namespace global
    // Captura qualquer exceção e envia como evento de erro
    sendEvent([
        'status' => 'error',
        'message' => 'Erro durante a atualização: ' . $e->getMessage()
    ], 'error');
    
    // Registra no log
    Logger::error('Erro durante a atualização: ' . $e->getMessage(), 'API');
} finally {
    // Aguarda 1 segundo antes de encerrar a conexão
    sleep(1);
}

// Encerra o script
exit();
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\api\news.php
================================================================================

<?php
header('Content-Type: application/json');

// Define o caminho para o arquivo de cache
$cacheFile = __DIR__ . '/../../cache/all_news.json';

if (file_exists($cacheFile)) {
    echo file_get_contents($cacheFile);
} else {
    echo json_encode([]);
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\admin.css
================================================================================

/* Estilos para a página de administração */
.admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
}

.back-link {
    display: inline-flex;
    align-items: center;
    padding: 8px 16px;
    color: #4299e1;
    text-decoration: none;
    border: 1px solid #4299e1;
    border-radius: 4px;
    font-size: 15px;
    transition: all 0.3s;
}

.back-link:hover {
    background-color: #4299e1;
    color: white;
}

.back-link i {
    margin-right: 6px;
}

.admin-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 25px;
}

.admin-panel {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    padding: 20px;
    position: relative;
}

.admin-panel h2 {
    font-size: 18px;
    color: #2d3748;
    margin-top: 0;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #edf2f7;
    display: flex;
    align-items: center;
}

.admin-panel h2 i {
    margin-right: 8px;
    color: #4299e1;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 20px;
}

.stat-item {
    text-align: center;
    padding: 15px;
    background: #f7fafc;
    border-radius: 8px;
    transition: transform 0.2s;
}

.stat-item:hover {
    transform: translateY(-3px);
}

.stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2d3748;
    margin-bottom: 5px;
}

.stat-label {
    font-size: 14px;
    color: #718096;
}

.cache-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.admin-btn {
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.btn-warning {
    background: #ed8936;
    color: white;
}

.btn-warning:hover {
    background: #dd6b20;
    box-shadow: 0 4px 6px rgba(221, 107, 32, 0.2);
}

.btn-info {
    background: #4299e1;
    color: white;
}

.btn-info:hover {
    background: #3182ce;
    box-shadow: 0 4px 6px rgba(49, 130, 206, 0.2);
}

/* Modo escuro */
body.dark-mode .admin-panel {
    background: #1e1e1e;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
}

body.dark-mode .admin-panel h2 {
    color: #e2e8f0;
    border-bottom-color: #4a5568;
}

body.dark-mode .admin-panel h2 i {
    color: #63b3ed;
}

body.dark-mode .stat-item {
    background: #2d3748;
}

body.dark-mode .stat-value {
    color: #e2e8f0;
}

body.dark-mode .stat-label {
    color: #a0aec0;
}

body.dark-mode .back-link {
    border-color: #4299e1;
    color: #63b3ed;
}

body.dark-mode .back-link:hover {
    background: #2b6cb0;
    color: #e2e8f0;
}

/* Responsividade */
@media (min-width: 768px) {
    .admin-container {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .admin-panel:first-child {
        grid-column: 1 / -1;
    }
    
    #debug-container {
        grid-column: 1 / -1;
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\cards.css
================================================================================

/* Estilos para visualização em cards */
.news-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.news-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    padding: 15px;
    position: relative;
    transition: transform 0.2s, box-shadow 0.2s;
    animation: fadeIn 0.5s ease-in-out;
}

.news-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.news-source {
    position: absolute;
    top: -10px;
    right: 10px;
    padding: 3px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: bold;
    color: white;
}

.g1 { background-color: #c4170c; }
.uol { background-color: #1e4b9b; }
.folha { background-color: #2661a8; }

.news-title {
    font-size: 18px;
    margin-top: 10px;
    margin-bottom: 8px;
}

.news-title a {
    color: #333;
    text-decoration: none;
}

.news-title a:hover {
    color: #0066cc;
}

.news-description {
    color: #666;
    font-size: 14px;
    line-height: 1.4;
    margin-bottom: 15px;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.news-meta {
    display: flex;
    justify-content: space-between;
    color: #888;
    font-size: 12px;
    border-top: 1px solid #eee;
    padding-top: 8px;
}

/* Cards no modo escuro */
body.dark-mode .news-card {
    background: #1e1e1e;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

body.dark-mode .news-title a {
    color: #e0e0e0;
}

body.dark-mode .news-description {
    color: #aaa;
}

body.dark-mode .news-meta {
    border-top-color: #333;
    color: #999;
}

/* Estilo para mensagem de nenhum resultado */
.no-results {
    width: 100%;
    text-align: center;
    padding: 40px 20px;
    color: #718096;
    font-style: italic;
    font-size: 16px;
    background: rgba(0,0,0,0.03);
    border-radius: 8px;
    margin: 20px 0;
}

body.dark-mode .no-results {
    background: rgba(255,255,255,0.05);
    color: #a0aec0;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\dark-mode.css
================================================================================

/* Estilos para o modo escuro */
body.dark-mode {
    background-color: #121212;
    color: #e0e0e0;
}

body.dark-mode h1 {
    color: #bb86fc;
    border-bottom-color: #333;
}

/* Botão de toggle do modo escuro */
.dark-mode-toggle {
    position: fixed;
    top: 20px;
    right: 20px;
    background: #f0f0f0;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    transition: background 0.3s;
}

body.dark-mode .dark-mode-toggle {
    background: #333;
    color: #bb86fc;
}

/* Ajustes para controles no modo escuro */
body.dark-mode .btn-primary {
    background: #4a5568;
}

body.dark-mode .btn-primary:hover {
    background: #2d3748;
}

body.dark-mode .view-btn {
    background: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
}

body.dark-mode .view-btn:hover, 
body.dark-mode .view-btn.active {
    background: #4a5568;
    border-color: #718096;
}

body.dark-mode .source-filter {
    background: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
}

/* Painel de atualização no modo escuro */
body.dark-mode .update-info {
    background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%) !important;
    color: #e2e8f0 !important;
    border: 1px solid #4a5568;
}

body.dark-mode .update-info-icon {
    background-color: #4a5568;
    color: #e2e8f0;
}

body.dark-mode .update-info-content {
    color: #e2e8f0 !important;
}

body.dark-mode .update-data .label {
    color: #a0aec0;
}

body.dark-mode .update-data .value {
    color: #e2e8f0 !important;
}

body.dark-mode .update-empty {
    color: #e2e8f0 !important;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\logs.css
================================================================================

/* Estilos para a área de logs */
#debug-container {
    margin-top: 30px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    overflow: hidden;
    transition: all 0.3s ease;
}

#debug-header {
    background: #f1f1f1;
    padding: 15px;
    border-bottom: 1px solid #e1e1e1;
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: space-between;
    align-items: center;
}

#debug-header h3 {
    margin: 0;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.debug-filters {
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
    background: rgba(0,0,0,0.03);
    padding: 8px 12px;
    border-radius: 5px;
}

.debug-filters label {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    user-select: none;
    transition: background 0.2s;
}

.debug-filters label:hover {
    background: rgba(0,0,0,0.05);
}

.debug-search {
    display: flex;
    gap: 5px;
    margin-top: 10px;
    width: 100%;
}

#log-search {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

button#search-btn, button#clear-logs-btn {
    background: #718096;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 15px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.2s;
}

button#search-btn:hover, button#clear-logs-btn:hover {
    background: #4a5568;
}

button#clear-logs-btn {
    background: #e53e3e;
}

button#clear-logs-btn:hover {
    background: #c53030;
}

/* Log entries */
#debug-log {
    max-height: 300px;
    overflow-y: auto;
    font-family: monospace;
    font-size: 13px;
    line-height: 1.5;
}

.log-container {
    padding: 10px 0;
}

.log-entry {
    padding: 8px 15px;
    margin-bottom: 2px;
    border-left: 4px solid transparent;
    display: flex;
    align-items: center;
    transition: background 0.2s;
}

.log-entry:hover {
    background-color: rgba(0,0,0,0.03);
}

.log-timestamp {
    min-width: 160px;
    color: #718096;
    font-size: 12px;
}

.log-context {
    min-width: 120px;
    color: #0277bd;
    font-weight: bold;
    margin-right: 10px;
}

.log-level {
    min-width: 70px;
    padding: 2px 6px;
    border-radius: 4px;
    text-align: center;
    font-size: 11px;
    font-weight: bold;
    margin-right: 10px;
    color: white !important;
}

/* Níveis de log */
.log-info .log-level {
    background-color: #3182ce;
    color: white !important;
}

.log-warning .log-level {
    background-color: #dd6b20;
    color: white !important;
}

.log-error .log-level {
    background-color: #e53e3e;
    color: white !important;
}

.log-debug .log-level {
    background-color: #718096;
    color: white !important;
}

.log-more {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 5px;
}

.log-empty {
    padding: 20px;
    text-align: center;
    color: #666;
    font-style: italic;
}

.log-highlight {
    background-color: #ffeb3b;
    color: #000;
}

.log-hidden {
    display: none;
}

/* Logs no modo escuro */
body.dark-mode #debug-container {
    background: #1e1e1e;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

body.dark-mode #debug-header {
    background: #2d2d2d;
    border-color: #444;
}

body.dark-mode .debug-filters {
    background: rgba(255,255,255,0.05);
}

body.dark-mode .debug-filters label:hover {
    background: rgba(255,255,255,0.1);
}

body.dark-mode #log-search {
    background: #2d2d2d;
    border-color: #444;
    color: #e0e0e0;
}

body.dark-mode #debug-log {
    background-color: #1e1e1e;
}

body.dark-mode .log-container {
    background-color: #1e1e1e;
}

body.dark-mode .log-entry {
    background-color: #2d2d2d;
    border-left-color: inherit;
    color: #e0e0e0;
}

body.dark-mode .log-entry:hover {
    background-color: #3a3a3a;
}

body.dark-mode .log-info {
    border-left-color: #4299e1;
}

body.dark-mode .log-warning {
    border-left-color: #ed8936;
    background-color: rgba(237, 137, 54, 0.1);
}

body.dark-mode .log-error {
    border-left-color: #f56565;
    background-color: rgba(245, 101, 101, 0.1);
}

body.dark-mode .log-debug {
    border-left-color: #a0aec0;
}

body.dark-mode .log-timestamp {
    color: #a0aec0;
}

body.dark-mode .log-message {
    color: #e2e8f0;
}

body.dark-mode .log-context {
    color: #63b3ed;
}

body.dark-mode .log-more {
    color: #a0aec0;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\main.css
================================================================================

/* Estilos gerais */
body {
    font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
    line-height: 1.5;
    color: #333;
    margin: 0;
    padding: 20px;
    background-color: #f9f9f9;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
}

h1 {
    font-size: 2.2rem;
    color: #2a2a72;
    margin-bottom: 1rem;
    border-bottom: 2px solid #e7e7e7;
    padding-bottom: 0.5rem;
}

/* Estilo para o painel de atualização */
.update-info {
    background: linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%);
    border-radius: 8px;
    margin-bottom: 20px;
    padding: 0;
    display: flex;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    overflow: hidden;
    transition: all 0.3s ease;
}

.update-info-icon {
    background-color: #4299e1;
    color: white;
    font-size: 24px;
    padding: 25px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.update-info-content {
    padding: 15px 20px;
    flex-grow: 1;
}

.update-data {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 10px;
}

.update-data .label {
    font-size: 12px;
    color: #718096;
    display: block;
}

.update-data .value {
    font-size: 14px;
    font-weight: bold;
    color: #2d3748;
    display: block;
}

/* Botões e controles */
.btn {
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: bold;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    margin: 0 15px;
}

.btn-primary {
    background: #4299e1;
    color: white;
}

.btn-primary:hover {
    background: #3182ce;
    box-shadow: 0 4px 8px rgba(49, 130, 206, 0.2);
}

#force-update-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

/* Controles de filtro e visualização */
.controls-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    gap: 10px;
}

.source-filters {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    margin: 15px 0;
}

.filter-title {
    font-weight: bold;
    color: #718096;
}

.source-filter {
    padding: 5px 15px;
    background: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
}

.source-filter:hover, .source-filter.active {
    background: #4299e1;
    color: white;
    border-color: #4299e1;
}

.source-filter[data-source="g1"].active {
    background: #c4170c;
    border-color: #c4170c;
}

.source-filter[data-source="uol"].active {
    background: #1e4b9b;
    border-color: #1e4b9b;
}

.source-filter[data-source="folha"].active {
    background: #2661a8;
    border-color: #2661a8;
}

/* Controles de visualização */
.view-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-left: auto;
}

.view-btn {
    width: 36px;
    height: 36px;
    background: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
}

.view-btn:hover, .view-btn.active {
    background: #4299e1;
    color: white;
    border-color: #4299e1;
}

/* Estilos para o campo de busca universal */
.search-container {
    margin: 15px 0;
    width: 100%;
}

.search-box {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
}

.search-input {
    width: 100%;
    padding: 10px 40px 10px 40px;
    border: 1px solid #e2e8f0;
    border-radius: 30px;
    font-size: 16px;
    transition: all 0.3s;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.search-input:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
}

.search-icon {
    position: absolute;
    left: 14px;
    top: 50%;
    transform: translateY(-50%);
    color: #718096;
}

.search-clear {
    position: absolute;
    right: 14px;
    top: 50%;
    transform: translateY(-50%);
    color: #a0aec0;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 14px;
    display: none;
    padding: 0;
    line-height: 1;
}

.search-clear:hover {
    color: #718096;
}

/* Estilo para o modo escuro */
body.dark-mode .search-input {
    background-color: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
}

body.dark-mode .search-input:focus {
    border-color: #63b3ed;
    box-shadow: 0 0 0 3px rgba(99, 179, 237, 0.3);
}

body.dark-mode .search-icon,
body.dark-mode .search-clear {
    color: #a0aec0;
}

/* Animações e efeitos globais */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes rotating {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

#force-update-btn:disabled i {
    animation: rotating 1.5s linear infinite;
}

/* Responsividade */
@media (max-width: 768px) {
    body { padding: 10px; }
    h1 { font-size: 1.8rem; }
    .controls-container {
        flex-direction: column;
        align-items: flex-start;
    }
    .view-controls {
        margin-left: 0;
        margin-top: 10px;
    }
    .source-filters, .view-controls {
        margin: 5px 0;
    }
}

/* Adicionar ao final do arquivo main.css */
.admin-link-container {
    margin-top: 40px;
    text-align: center;
    padding: 20px 0;
    border-top: 1px solid #e2e8f0;
}

.admin-link {
    display: inline-flex;
    align-items: center;
    padding: 6px 12px;
    color: #718096;
    font-size: 14px;
    text-decoration: none;
    border: 1px solid #e2e8f0;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.admin-link:hover {
    background-color: #f7fafc;
    color: #4a5568;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.admin-link i {
    margin-right: 6px;
}

body.dark-mode .admin-link-container {
    border-top-color: #4a5568;
}

body.dark-mode .admin-link {
    color: #a0aec0;
    border-color: #4a5568;
}

body.dark-mode .admin-link:hover {
    background-color: #2d3748;
    color: #e2e8f0;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\css\table.css
================================================================================

/* Estilos para a tabela de notícias */
#newsTable {
    border-collapse: separate;
    border-spacing: 0;
    width: 100%;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    overflow: hidden;
}

#newsTable th {
    background-color: #f7fafc;
    color: #4a5568;
    font-weight: 600;
    text-align: left;
    padding: 12px 15px;
    border-bottom: 2px solid #e2e8f0;
}

#newsTable td {
    padding: 10px 15px;
    border-bottom: 1px solid #e2e8f0;
}

#newsTable tr:last-child td {
    border-bottom: none;
}

.news-link {
    color: #2a4365;
    font-weight: 500;
    text-decoration: none;
}

.news-link:hover {
    text-decoration: underline;
    color: #3182ce;
}

.description-preview {
    font-size: 13px;
    color: #718096;
    margin-top: 5px;
    line-height: 1.4;
}

.source-badge {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 11px;
    color: white;
    font-weight: bold;
}

/* Ajustes para DataTables */
.dataTables_wrapper .dataTables_length,
.dataTables_wrapper .dataTables_filter,
.dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_processing,
.dataTables_wrapper .dataTables_paginate {
    margin-bottom: 10px;
}

.dataTables_wrapper .dataTables_paginate .paginate_button.current {
    background: #4299e1;
    border-color: #4299e1;
    color: white !important;
}

.dataTables_wrapper .dataTables_paginate .paginate_button:hover {
    background: #3182ce;
    border-color: #3182ce;
}

/* Tabela no modo escuro */
body.dark-mode #newsTable {
    border-color: #4a5568;
}

body.dark-mode #newsTable th {
    background-color: #2d3748;
    color: #e2e8f0;
    border-bottom-color: #4a5568;
}

body.dark-mode #newsTable td {
    border-bottom-color: #4a5568;
    color: #e2e8f0;
}

body.dark-mode .news-link {
    color: #63b3ed;
}

body.dark-mode .news-link:hover {
    color: #90cdf4;
}

body.dark-mode .description-preview {
    color: #a0aec0;
}

/* DataTables no modo escuro */
body.dark-mode .dataTables_wrapper .dataTables_length,
body.dark-mode .dataTables_wrapper .dataTables_filter,
body.dark-mode .dataTables_wrapper .dataTables_info,
body.dark-mode .dataTables_wrapper .dataTables_processing,
body.dark-mode .dataTables_wrapper .dataTables_paginate {
    color: #e2e8f0;
}

body.dark-mode .dataTables_wrapper .dataTables_paginate .paginate_button {
    color: #e2e8f0 !important;
}

body.dark-mode .dataTables_wrapper .dataTables_paginate .paginate_button.current,
body.dark-mode .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
    color: #2d3748 !important;
    background: #63b3ed;
    border-color: #63b3ed;
}

body.dark-mode .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
    color: #2d3748 !important;
    background: #4299e1;
    border-color: #4299e1;
}

/* Inputs no modo escuro */
body.dark-mode .dataTables_length select,
body.dark-mode .dataTables_filter input {
    background-color: #2d3748;
    color: #e2e8f0;
    border-color: #4a5568;
}

body.dark-mode .dataTables_length select:focus,
body.dark-mode .dataTables_filter input:focus {
    border-color: #63b3ed;
    outline: none;
    box-shadow: 0 0 0 1px #63b3ed;
}

/* Adicionar ao final */
/* Melhor espaçamento quando campo de busca padrão é removido */
div.dataTables_wrapper div.dataTables_length, 
div.dataTables_wrapper div.dataTables_info, 
div.dataTables_wrapper div.dataTables_paginate {
    margin-top: 10px;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\admin.js
================================================================================

/**
 * Funções específicas para a página de administração
 */
$(document).ready(function() {
    // Alternância entre diferentes painéis (se necessário)
    $('.admin-nav-item').click(function() {
        const target = $(this).data('target');
        
        // Ativa o item de navegação atual
        $('.admin-nav-item').removeClass('active');
        $(this).addClass('active');
        
        // Mostra o painel correspondente
        $('.admin-panel').hide();
        $(target).show();
    });
    
    // Atualização de estatísticas em tempo real (opcional)
    function refreshStats() {
        $.getJSON('/api/admin-stats.php')
            .done(function(data) {
                if (data.success) {
                    $('#total-news').text(data.stats.totalNews);
                    $('#total-sources').text(data.stats.totalSources);
                    $('#last-update').text(data.stats.lastUpdate);
                }
            });
    }
    
    // Opcional: atualizar estatísticas a cada 60 segundos
    // setInterval(refreshStats, 60000);
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\dark-mode.js
================================================================================

/**
 * Funcionalidade de alternância do modo escuro
 */
document.addEventListener('DOMContentLoaded', function() {
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
    
    // Verifica preferência salva ou sistema
    const currentTheme = localStorage.getItem('theme');
    if (currentTheme === 'dark' || (!currentTheme && prefersDarkScheme.matches)) {
        document.body.classList.add('dark-mode');
    }
    
    // Altera o ícone no botão baseado no modo atual
    updateDarkModeIcon();
    
    darkModeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        
        // Salva preferência
        if (document.body.classList.contains('dark-mode')) {
            localStorage.setItem('theme', 'dark');
        } else {
            localStorage.setItem('theme', 'light');
        }
        
        updateDarkModeIcon();
    });
    
    // Atualiza o ícone do botão de modo escuro
    function updateDarkModeIcon() {
        const icon = darkModeToggle.querySelector('i');
        if (document.body.classList.contains('dark-mode')) {
            icon.className = 'fas fa-sun';
        } else {
            icon.className = 'fas fa-moon';
        }
    }
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\logs.js
================================================================================

/**
 * Funcionalidades da área de logs (filtros, busca, etc.)
 */
$(document).ready(function() {
    // Contador de logs inicial
    updateLogCount();
    
    // Filtrar logs por nível
    $('.log-filter').change(function() {
        let activeFilters = [];
        $('.log-filter:checked').each(function() {
            activeFilters.push($(this).val());
        });
        
        $('.log-entry').each(function() {
            const logLevel = $(this).data('level');
            if (!logLevel || activeFilters.includes(logLevel)) {
                $(this).removeClass('log-hidden');
            } else {
                $(this).addClass('log-hidden');
            }
        });
        
        updateLogCount();
    });
    
    // Busca nos logs
    $('#search-btn').click(function() {
        searchLogs();
    });
    
    $('#log-search').keypress(function(e) {
        if (e.which == 13) { // Enter key
            searchLogs();
        }
    });
    
    // Limpar visualização
    $('#clear-logs-btn').click(function() {
        $('.log-container').empty()
            .append('<div class="log-empty">Logs limpos da visualização.</div>');
        updateLogCount();
    });
    
    function searchLogs() {
        const searchText = $('#log-search').val().toLowerCase();
        
        // Remove destacamento anterior
        $('.log-message').find('mark').contents().unwrap();
        
        if (!searchText) {
            return;
        }
        
        let matchCount = 0;
        
        // Para cada entrada de log visível
        $('.log-entry:not(.log-hidden)').each(function() {
            const $message = $(this).find('.log-message');
            const messageText = $message.text();
            
            if (messageText.toLowerCase().includes(searchText)) {
                // Destaca o texto encontrado
                const regex = new RegExp('(' + searchText.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ')', 'gi');
                const highlighted = messageText.replace(regex, '<mark>$1</mark>');
                $message.html(highlighted);
                matchCount++;
            }
        });
        
        // Feedback da busca
        if (matchCount > 0) {
            alert(`Encontradas ${matchCount} ocorrências para "${searchText}"`);
        } else {
            alert(`Nenhuma ocorrência encontrada para "${searchText}"`);
        }
    }
    
    function updateLogCount() {
        const totalLogs = $('.log-entry').length;
        const visibleLogs = $('.log-entry:not(.log-hidden)').length;
        
        if (totalLogs === 0) {
            $('#log-count').text('');
            return;
        }
        
        if (totalLogs === visibleLogs) {
            $('#log-count').text(`${totalLogs} logs`);
        } else {
            $('#log-count').text(`${visibleLogs} de ${totalLogs} logs`);
        }
    }
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\main.js
================================================================================

/**
 * Inicialização geral e configurações do DataTables
 */
$(document).ready(function() {
    // Inicialização do DataTables
    const newsTable = $('#newsTable').DataTable({
        language: {
            "decimal":        "",
            "emptyTable":     "Nenhuma notícia encontrada",
            "info":           "Mostrando de _START_ até _END_ de _TOTAL_ entradas",
            "infoEmpty":      "Mostrando 0 até 0 de 0 entradas",
            "infoFiltered":   "(filtrado de _MAX_ entradas no total)",
            "thousands":      ".",
            "lengthMenu":     "Mostrar _MENU_ entradas",
            "loadingRecords": "Carregando...",
            "processing":     "Processando...",
            "search":         "Buscar:",
            "zeroRecords":    "Nenhum registro encontrado",
            "paginate": {
                "first":      "Primeiro",
                "last":       "Último",
                "next":       "Próximo",
                "previous":   "Anterior"
            },
            "aria": {
                "sortAscending":  ": ativar para classificar em ordem crescente",
                "sortDescending": ": ativar para classificar em ordem decrescente"
            }
        },
        order: [[0, 'desc']],
        pageLength: 10,
        deferRender: true,
        processing: true,
        searching: true,        // Mantém o recurso de busca ativo
        dom: '<"top">rt<"bottom"lip><"clear">' // Remove o campo de busca padrão ("f") da interface
    });

    // Tornar a variável newsTable acessível globalmente
    window.newsTable = newsTable;
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\scraper.js
================================================================================

/**
 * Lógica para atualização de notícias via Server-Sent Events
 */
$(document).ready(function() {
    // Ao clicar no botão "Forçar Atualização"
    $('#force-update-btn').click(function() {
        // Desabilita o botão durante a atualização
        $(this).prop('disabled', true);
        
        // Remove log anterior se existir
        $('#update-log').remove();
        
        // Cria um div para exibir o log de atualização
        let $updateLog = $('<div id="update-log" style="margin:10px 0; padding:8px; background:#f8f9fa; border:1px solid #ddd; border-radius:4px; font-family:monospace; max-height:300px; overflow-y:auto;"></div>');
        $('#loading-indicator').html('<span>Conectando ao servidor...</span>').after($updateLog);
        
        // Adiciona uma linha ao log de atualização
        function addLogLine(message, className = '') {
            let timestamp = new Date().toLocaleTimeString();
            $updateLog.append(`<div class="${className}">[${timestamp}] ${message}</div>`);
            // Auto-scroll para o final
            $updateLog.scrollTop($updateLog[0].scrollHeight);
        }
        
        // Contador para reconexões
        let reconnectAttempts = 0;
        const MAX_RECONNECT_ATTEMPTS = 3;
        
        // Função para criar e configurar a conexão SSE
        function setupEventSource() {
            // Fecha a conexão existente se houver
            if (window.activeEventSource) {
                window.activeEventSource.close();
            }
            
            // Adiciona um timestamp para evitar cache
            const eventSource = new EventSource('/api/force_update.php?t=' + Date.now());
            window.activeEventSource = eventSource;
            
            // Evento de abertura da conexão
            eventSource.onopen = function() {
                addLogLine("Conexão estabelecida com o servidor", "text-info");
                reconnectAttempts = 0; // Reseta contagem de tentativas
            };
            
            // Evento de início de processo
            eventSource.addEventListener('start', function(e) {
                const data = JSON.parse(e.data);
                $('#loading-indicator').html('<span style="color:#ff6600">Atualizando...</span>');
                addLogLine(data.message, 'text-primary');
            });
            
            // Evento de progresso
            eventSource.addEventListener('progress', function(e) {
                const data = JSON.parse(e.data);
                addLogLine(data.message);
            });
            
            // Evento de heartbeat para manter a conexão
            eventSource.addEventListener('heartbeat', function() {
                console.log("Heartbeat recebido");
            });
            
            // Evento de conclusão
            eventSource.addEventListener('complete', function(e) {
                const data = JSON.parse(e.data);
                
                // Adiciona informação final de sucesso
                addLogLine(`Concluído em ${data.execution_time}s! Total de ${data.articles_count} notícias.`, 'text-success');
                
                // Adiciona estatísticas por fonte
                if (data.sources) {
                    let sourcesText = 'Notícias por fonte: ';
                    Object.entries(data.sources).forEach(([source, count], index, arr) => {
                        sourcesText += `${source} (${count})${index < arr.length - 1 ? ', ' : ''}`;
                    });
                    addLogLine(sourcesText, 'text-info');
                }
                
                // Exibe mensagem de sucesso no indicador principal
                $('#loading-indicator').html(`<span style="color:#228B22">Atualização concluída!</span>`);
                
                // Fecha a conexão SSE
                eventSource.close();
                window.activeEventSource = null;
                
                // Reativa o botão após 1 segundo
                setTimeout(function() {
                    $('#force-update-btn').prop('disabled', false);
                }, 1000);
                
                // Recarrega a página após 5 segundos
                setTimeout(function() {
                    location.reload();
                }, 5000);
            });
            
            // Evento de erro no processo
            eventSource.addEventListener('error', function(e) {
                if (e.data) {
                    try {
                        const data = JSON.parse(e.data);
                        addLogLine(data.message, 'text-danger');
                    } catch (err) {
                        addLogLine("Erro no processamento: " + e.data, 'text-danger');
                    }
                }
            });
            
            // Em caso de erro na conexão
            eventSource.onerror = function(e) {
                // Tenta reconectar algumas vezes
                if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                    reconnectAttempts++;
                    addLogLine(`Tentativa de reconexão ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}...`, 'text-warning');
                    
                    setTimeout(function() {
                        eventSource.close();
                        setupEventSource();
                    }, 2000); // Espera 2 segundos antes de reconectar
                } else {
                    addLogLine("Conexão com o servidor perdida após várias tentativas", 'text-danger');
                    $('#loading-indicator').html(`<span style="color:#d32f2f">Erro de conexão</span>`);
                    
                    eventSource.close();
                    window.activeEventSource = null;
                    $('#force-update-btn').prop('disabled', false);
                }
            };
            
            return eventSource;
        }
        
        // Inicia a conexão SSE
        setupEventSource();
    });
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\universal-search.js
================================================================================

/**
 * Implementação de busca universal para cartões e tabela
 */
$(document).ready(function() {
    const $searchInput = $('#universal-search');
    const $clearButton = $('#clear-search');
    const $newsCards = $('.news-card');
    const dataTable = $('#newsTable').DataTable();
    
    // Função para sincronizar a busca com o DataTable quando estivermos no modo tabela
    function syncWithDataTable(searchTerm) {
        if ($('#table-view').is(':visible')) {
            dataTable.search(searchTerm).draw();
        }
    }
    
    // Função para limpar o campo de busca
    function clearSearch() {
        $searchInput.val('');
        $searchInput.trigger('input');
        $clearButton.hide();
    }
    
    // Mostrar/ocultar o botão limpar
    $searchInput.on('input', function() {
        const searchTerm = $(this).val().toLowerCase().trim();
        
        // Mostrar/ocultar botão de limpar
        if (searchTerm.length > 0) {
            $clearButton.show();
        } else {
            $clearButton.hide();
        }
        
        // Filtrar cartões no modo grid
        if ($('#grid-view').is(':visible')) {
            filterCards(searchTerm);
        }
        
        // Sincronizar com DataTable no modo tabela
        syncWithDataTable(searchTerm);
    });
    
    // Função para filtrar cartões
    function filterCards(searchTerm) {
        if (!searchTerm) {
            // Se não houver termo de busca, mostra todos os cartões
            // (respeitando o filtro de fonte atual)
            $('.source-filter.active').trigger('click');
            return;
        }
        
        $newsCards.each(function() {
            const $card = $(this);
            const title = $card.find('.news-title').text().toLowerCase();
            const description = $card.find('.news-description').text().toLowerCase();
            const author = $card.find('.news-author').text().toLowerCase();
            const source = $card.find('.news-source').text().toLowerCase();
            
            // Verifica se o termo de busca existe em qualquer campo do cartão
            const matches = title.includes(searchTerm) || 
                           description.includes(searchTerm) || 
                           author.includes(searchTerm) || 
                           source.includes(searchTerm);
            
            // Mostra ou oculta com base no resultado da busca
            if (matches) {
                $card.show();
            } else {
                $card.hide();
            }
        });
        
        // Mostra mensagem se não houver resultados
        const visibleCards = $newsCards.filter(':visible').length;
        if (visibleCards === 0) {
            if ($('#no-results').length === 0) {
                $('#grid-view').append('<div id="no-results" class="no-results">Nenhum resultado encontrado para "' + searchTerm + '"</div>');
            }
        } else {
            $('#no-results').remove();
        }
    }
    
    // Limpar busca ao clicar no botão
    $clearButton.on('click', clearSearch);
    
    // Ao alternar entre visualizações, sincroniza o campo de busca
    $('#grid-view-btn, #table-view-btn').on('click', function() {
        const searchTerm = $searchInput.val();
        if (searchTerm) {
            setTimeout(function() {
                if ($('#grid-view').is(':visible')) {
                    filterCards(searchTerm.toLowerCase().trim());
                } else {
                    syncWithDataTable(searchTerm);
                }
            }, 10);
        }
    });
    
    // Quando aplicamos um filtro de fonte, respeitamos também o termo de busca
    $('.source-filter').on('click', function() {
        const searchTerm = $searchInput.val().toLowerCase().trim();
        if (searchTerm && $('#grid-view').is(':visible')) {
            setTimeout(function() {
                filterCards(searchTerm);
            }, 10);
        }
    });
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\assets\js\view-switcher.js
================================================================================

/**
 * Alternância entre visualização em cards e tabela
 */
$(document).ready(function() {
    // Script para filtrar notícias por fonte
    $('.source-filter').click(function() {
        const source = $(this).data('source');
        
        // Atualiza classes ativas
        $('.source-filter').removeClass('active');
        $(this).addClass('active');
        
        // Filtro para os cards
        if (source === 'all') {
            $('.news-card').show();
        } else {
            $('.news-card').hide();
            $(`.news-card .news-source.${source}`).parent().show();
        }
        
        // Filtro para a tabela usando DataTables API
        if (window.newsTable) {
            if (source === 'all') {
                window.newsTable.column(2).search('').draw();
            } else {
                window.newsTable.column(2).search(source, false, false).draw();
            }
        }
        
        // Salva a preferência de filtro
        localStorage.setItem('preferred-filter', source);
    });

    // Restaurar preferência de filtro
    const preferredFilter = localStorage.getItem('preferred-filter');
    if (preferredFilter && preferredFilter !== 'all') {
        $(`.source-filter[data-source="${preferredFilter}"]`).click();
    }

    // Alternar entre visualização em cards e tabela
    $('#grid-view-btn').click(function() {
        $(this).addClass('active');
        $('#table-view-btn').removeClass('active');
        $('#grid-view').show();
        $('#table-view').hide();
        localStorage.setItem('preferred-view', 'grid');
    });

    $('#table-view-btn').click(function() {
        $(this).addClass('active');
        $('#grid-view-btn').removeClass('active');
        $('#table-view').show();
        $('#grid-view').hide();
        // Ajusta as colunas da tabela quando ela se torna visível
        if (window.newsTable) {
            window.newsTable.columns.adjust();
        }
        localStorage.setItem('preferred-view', 'table');
    });

    // Restaurar preferência de visualização
    const preferredView = localStorage.getItem('preferred-view');
    if (preferredView === 'table') {
        $('#table-view-btn').click();
    }
});

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\css\style.css
================================================================================

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}
h1 {
    color: #333;
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\public\js\script.js
================================================================================

// Função que busca as notícias via endpoint JSON
function fetchNews() {
    fetch('/public/api/news.php')
        .then(response => response.json())
        .then(data => updateNews(data))
        .catch(error => console.error('Erro ao buscar notícias:', error));
}

// Atualiza o conteúdo do container com as notícias recebidas
function updateNews(data) {
    const container = document.getElementById('newsContainer');
    if (data && data.length > 0) {
        let html = '<ul>';
        data.forEach(item => {
            html += `<li>
                        <a href="${item.url}" target="_blank">${item.title}</a>
                        <p>${item.description}</p>
                     </li>`;
        });
        html += '</ul>';
        container.innerHTML = html;
    } else {
        container.innerHTML = '<p>Nenhuma notícia encontrada.</p>';
    }
}

// Chamada inicial para carregar as notícias imediatamente
fetchNews();

// Atualiza as notícias a cada 60 segundos (60000 milissegundos)
setInterval(fetchNews, 60000);


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheFactory.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheFactory.php

namespace App\Cache;

use App\Utils\Logger;

class CacheFactory
{
    /**
     * Cria uma instância de cache com base no tipo especificado
     * 
     * @param string $type Tipo de cache (redis, memcached, file)
     * @param array $config Configurações
     * @return CacheInterface Instância da implementação
     */
    public static function create(string $type = 'file', array $config = []): CacheInterface
    {
        $type = strtolower($type);
        
        try {
            switch ($type) {
                case 'redis':
                    if (class_exists('\Predis\Client')) {
                        return new RedisCache($config);
                    }
                    Logger::warning('Predis não encontrado, usando fallback', 'Cache');
                    return self::create('file', $config);
                    
                case 'memcached':
                    if (class_exists('\Memcached')) {
                        return new MemcachedCache($config);
                    }
                    Logger::warning('Memcached não encontrado, usando fallback', 'Cache');
                    return self::create('file', $config);
                    
                case 'file':
                default:
                    return new FileCache($config);
            }
        } catch (\Exception $e) {
            Logger::error('Erro ao criar cache: ' . $e->getMessage(), 'Cache');
            return new FileCache($config);
        }
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheInterface.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheInterface.php

namespace App\Cache;

interface CacheInterface
{
    /**
     * Recupera um item do cache
     * 
     * @param string $key A chave do item
     * @param mixed $default Valor padrão caso o item não exista
     * @return mixed O item do cache ou o valor padrão
     */
    public function get(string $key, $default = null);
    
    /**
     * Armazena um item no cache
     * 
     * @param string $key A chave do item
     * @param mixed $value O valor a ser armazenado
     * @param int $ttl Tempo de vida em segundos
     * @return bool Sucesso da operação
     */
    public function set(string $key, $value, int $ttl = 600): bool;
    
    /**
     * Verifica se um item existe no cache e não expirou
     * 
     * @param string $key A chave do item
     * @return bool Verdadeiro se o item existir
     */
    public function has(string $key): bool;
    
    /**
     * Remove um item do cache
     * 
     * @param string $key A chave do item
     * @return bool Sucesso da operação
     */
    public function delete(string $key): bool;
    
    /**
     * Limpa todo o cache
     * 
     * @return bool Sucesso da operação
     */
    public function clear(): bool;
    
    /**
     * Obtém ou calcula um valor
     * 
     * @param string $key A chave do item
     * @param int $ttl Tempo de vida em segundos
     * @param callable $callback Função para calcular o valor se não existir
     * @return mixed O valor armazenado ou calculado
     */
    public function remember(string $key, int $ttl, callable $callback);
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheManager.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\CacheManager.php

namespace App\Cache;

use App\Utils\Logger;
use App\Factories\RepositoryFactory;

class CacheManager
{
    /**
     * Limpa o cache de notícias
     * 
     * @return bool Sucesso da operação
     */
    public static function clearNewsCache(): bool
    {
        try {
            // Limpa o cache do Redis/Memcached/File
            $cache = getCache();
            $cacheResult = $cache->clear();
            
            // Limpa o banco de dados também
            $repository = RepositoryFactory::createNewsRepository();
            $dbResult = $repository->clear();
            
            $success = $cacheResult && $dbResult;
            
            if ($success) {
                Logger::info('Cache e banco de dados de notícias limpos com sucesso', 'CacheManager');
            } else {
                Logger::error('Falha ao limpar cache ou banco de dados de notícias', 'CacheManager');
            }
            
            return $success;
        } catch (\Exception $e) {
            Logger::error('Erro ao limpar cache: ' . $e->getMessage(), 'CacheManager');
            return false;
        }
    }
    
    /**
     * Pré-aquece o cache buscando os dados
     * 
     * @return bool Sucesso da operação
     */
    public static function warmNewsCache(): bool
    {
        try {
            Logger::info('Iniciando pré-aquecimento do cache e banco', 'CacheManager');
            
            $scraper = new \App\Models\Scraper();
            $news = $scraper->getAllPoliticalNews(true);
            
            Logger::info('Cache e banco pré-aquecido com ' . count($news) . ' notícias', 'CacheManager');
            return true;
        } catch (\Exception $e) {
            Logger::error('Erro no pré-aquecimento: ' . $e->getMessage(), 'CacheManager');
            return false;
        }
    }
    
    /**
     * Retorna estatísticas do cache
     * 
     * @return array Estatísticas
     */
    public static function getStats(): array
    {
        $cache = getCache();
        $stats = [
            'type' => CACHE_TYPE,
            'ttl' => CACHE_TTL,
            'status' => 'ativo'
        ];
        
        // Para Redis e Memcached, podemos adicionar mais estatísticas
        if (CACHE_TYPE === 'redis' && $cache instanceof RedisCache) {
            try {
                // Exemplo, precisaria ser implementado na classe RedisCache
                // $info = $cache->getRedisInfo();
                // $stats['memory_used'] = $info['used_memory_human'];
                // $stats['total_keys'] = $info['db0'];
            } catch (\Exception $e) {
                $stats['error'] = $e->getMessage();
            }
        }
        
        return $stats;
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\FileCache.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\FileCache.php

namespace App\Cache;

use App\Utils\Logger;

class FileCache implements CacheInterface
{
    private $cacheDir;
    private $prefix;
    private $defaultTtl;
    
    /**
     * Cria uma nova instância de FileCache
     * 
     * @param array $config Configuração do cache de arquivo
     */
    public function __construct(array $config = [])
    {
        $this->prefix = $config['prefix'] ?? 'news_';
        $this->defaultTtl = $config['ttl'] ?? 600;
        $this->cacheDir = $config['directory'] ?? __DIR__ . '/../../../cache/';
        
        if (!is_dir($this->cacheDir)) {
            mkdir($this->cacheDir, 0777, true);
            Logger::info('Diretório de cache criado: ' . $this->cacheDir, 'Cache');
        }
        
        Logger::info('File cache iniciado com sucesso', 'Cache');
    }
    
    /**
     * Retorna o caminho completo do arquivo de cache
     */
    private function getFilename(string $key): string
    {
        return $this->cacheDir . $this->prefix . md5($key) . '.cache';
    }
    
    public function get(string $key, $default = null)
    {
        $filename = $this->getFilename($key);
        
        if (!file_exists($filename)) {
            return $default;
        }
        
        $content = file_get_contents($filename);
        if ($content === false) {
            Logger::error('Erro ao ler o arquivo de cache: ' . $filename, 'Cache');
            return $default;
        }
        
        $data = json_decode($content, true);
        
        // Verifica se o cache expirou
        if ($data['expires'] < time()) {
            $this->delete($key);
            return $default;
        }
        
        return $data['value'];
    }
    
    public function set(string $key, $value, int $ttl = 0): bool
    {
        if ($ttl === 0) {
            $ttl = $this->defaultTtl;
        }
        
        $filename = $this->getFilename($key);
        
        $data = [
            'expires' => time() + $ttl,
            'value' => $value
        ];
        
        $result = file_put_contents($filename, json_encode($data));
        
        if ($result === false) {
            Logger::error('Erro ao gravar o arquivo de cache: ' . $filename, 'Cache');
            return false;
        }
        
        return true;
    }
    
    public function has(string $key): bool
    {
        $filename = $this->getFilename($key);
        
        if (!file_exists($filename)) {
            return false;
        }
        
        // Verifica se o cache expirou
        $content = file_get_contents($filename);
        if ($content === false) {
            return false;
        }
        
        $data = json_decode($content, true);
        
        if ($data['expires'] < time()) {
            $this->delete($key);
            return false;
        }
        
        return true;
    }
    
    public function delete(string $key): bool
    {
        $filename = $this->getFilename($key);
        
        if (file_exists($filename)) {
            return unlink($filename);
        }
        
        return true;
    }
    
    public function clear(): bool
    {
        $files = glob($this->cacheDir . $this->prefix . '*.cache');
        
        foreach ($files as $file) {
            if (is_file($file)) {
                unlink($file);
            }
        }
        
        return true;
    }
    
    public function remember(string $key, int $ttl, callable $callback)
    {
        if ($this->has($key)) {
            return $this->get($key);
        }
        
        $value = $callback();
        $this->set($key, $value, $ttl);
        return $value;
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\MemcachedCache.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\MemcachedCache.php

namespace App\Cache;

use App\Utils\Logger;

class MemcachedCache implements CacheInterface
{
    private $memcached;
    private $prefix;
    private $defaultTtl;
    
    /**
     * Cria uma nova instância de MemcachedCache
     * 
     * @param array $config Configuração do Memcached
     */
    public function __construct(array $config = [])
    {
        $this->prefix = $config['prefix'] ?? 'news_';
        $this->defaultTtl = $config['ttl'] ?? 600;
        
        try {
            $this->memcached = new \Memcached();
            
            // Adiciona os servidores (pode ser um array de servidores para cluster)
            $servers = $config['servers'] ?? [
                ['host' => '127.0.0.1', 'port' => 11211, 'weight' => 100]
            ];
            
            foreach ($servers as $server) {
                $this->memcached->addServer(
                    $server['host'],
                    $server['port'],
                    $server['weight'] ?? 100
                );
            }
            
            // Configura opções
            $this->memcached->setOption(\Memcached::OPT_COMPRESSION, true);
            $this->memcached->setOption(\Memcached::OPT_BINARY_PROTOCOL, true);
            
            Logger::info('Memcached cache iniciado com sucesso', 'Cache');
        } catch (\Exception $e) {
            Logger::error('Falha ao inicializar o Memcached: ' . $e->getMessage(), 'Cache');
            throw $e;
        }
    }
    
    /**
     * Retorna a chave completa com o prefixo
     */
    private function key(string $key): string
    {
        return $this->prefix . $key;
    }
    
    public function get(string $key, $default = null)
    {
        try {
            $value = $this->memcached->get($this->key($key));
            
            if ($this->memcached->getResultCode() === \Memcached::RES_NOTFOUND) {
                return $default;
            }
            
            return $value;
        } catch (\Exception $e) {
            Logger::error('Erro ao recuperar do Memcached: ' . $e->getMessage(), 'Cache');
            return $default;
        }
    }
    
    public function set(string $key, $value, int $ttl = 0): bool
    {
        if ($ttl === 0) {
            $ttl = $this->defaultTtl;
        }
        
        try {
            return $this->memcached->set($this->key($key), $value, $ttl);
        } catch (\Exception $e) {
            Logger::error('Erro ao gravar no Memcached: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function has(string $key): bool
    {
        try {
            $this->memcached->get($this->key($key));
            return $this->memcached->getResultCode() !== \Memcached::RES_NOTFOUND;
        } catch (\Exception $e) {
            Logger::error('Erro ao verificar existência no Memcached: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function delete(string $key): bool
    {
        try {
            return $this->memcached->delete($this->key($key));
        } catch (\Exception $e) {
            Logger::error('Erro ao excluir do Memcached: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function clear(): bool
    {
        try {
            // Infelizmente, Memcached não tem método para limpar apenas chaves com prefixo
            // então precisamos limpar tudo ou manter um registro das chaves
            return $this->memcached->flush();
        } catch (\Exception $e) {
            Logger::error('Erro ao limpar o Memcached: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function remember(string $key, int $ttl, callable $callback)
    {
        if ($this->has($key)) {
            return $this->get($key);
        }
        
        $value = $callback();
        $this->set($key, $value, $ttl);
        return $value;
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\RedisCache.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Cache\RedisCache.php

namespace App\Cache;

use Predis\Client;
use App\Utils\Logger;

class RedisCache implements CacheInterface
{
    protected $redis;
    protected $prefix;
    protected $defaultTtl;
    
    /**
     * Cria uma nova instância de RedisCache
     * 
     * @param array $config Configuração do Redis
     */
    public function __construct(array $config = [])
    {
        $this->prefix = $config['prefix'] ?? 'news_';
        $this->defaultTtl = $config['ttl'] ?? 600;
        
        // Permitir injeção do cliente Redis para testes
        if (isset($config['client'])) {
            $this->redis = $config['client'];
        } else {
            try {
                $this->redis = new Client([
                    'scheme' => $config['scheme'] ?? 'tcp',
                    'host'   => $config['host'] ?? '127.0.0.1',
                    'port'   => $config['port'] ?? 6379,
                    'password' => $config['password'] ?? null,
                    'database' => $config['database'] ?? 0,
                ]);
                
                // Teste a conexão
                $this->redis->ping();
                Logger::info('Redis cache iniciado com sucesso', 'Cache');
            } catch (\Exception $e) {
                Logger::error('Falha ao inicializar o Redis: ' . $e->getMessage(), 'Cache');
                throw $e;
            }
        }
    }
    
    /**
     * Retorna a chave completa com o prefixo
     */
    private function key(string $key): string
    {
        return $this->prefix . $key;
    }
    
    public function get(string $key, $default = null)
    {
        try {
            $value = $this->redis->get($this->key($key));
            
            if ($value === null) {
                return $default;
            }
            
            $decoded = json_decode($value, true);
            return $decoded === null ? $value : $decoded;
        } catch (\Exception $e) {
            Logger::error('Erro ao recuperar do Redis: ' . $e->getMessage(), 'Cache');
            return $default;
        }
    }
    
    public function set(string $key, $value, int $ttl = 0): bool
    {
        if ($ttl === 0) {
            $ttl = $this->defaultTtl;
        }
        
        try {
            $value = is_scalar($value) && !is_string($value) ? $value : json_encode($value);
            $this->redis->setex($this->key($key), $ttl, $value);
            return true;
        } catch (\Exception $e) {
            Logger::error('Erro ao gravar no Redis: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function has(string $key): bool
    {
        try {
            return (bool) $this->redis->exists($this->key($key));
        } catch (\Exception $e) {
            Logger::error('Erro ao verificar existência no Redis: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function delete(string $key): bool
    {
        try {
            $this->redis->del($this->key($key));
            return true;
        } catch (\Exception $e) {
            Logger::error('Erro ao excluir do Redis: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function clear(): bool
    {
        try {
            // Limpa apenas as chaves com o prefixo
            $keys = $this->redis->keys($this->prefix . '*');
            if (count($keys) > 0) {
                $this->redis->del($keys);
            }
            return true;
        } catch (\Exception $e) {
            Logger::error('Erro ao limpar o Redis: ' . $e->getMessage(), 'Cache');
            return false;
        }
    }
    
    public function remember(string $key, int $ttl, callable $callback)
    {
        if ($this->has($key)) {
            return $this->get($key);
        }
        
        $value = $callback();
        $this->set($key, $value, $ttl);
        return $value;
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Controllers\AdminController.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Controllers\AdminController.php

namespace App\Controllers;

use App\Factories\RepositoryFactory;

class AdminController {
    public function index() {
        // Carregar todas as notícias para estatísticas
        $repository = RepositoryFactory::createNewsRepository();
        $news = $repository->getAll();
        
        // Incluir a view de administração
        require_once __DIR__ . '/../Views/admin.php';
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Controllers\NewsController.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Controllers\NewsController.php

namespace App\Controllers;

use App\Models\Scraper;
use App\Views\Helpers\ViewHelper;
use App\Factories\RepositoryFactory;

class NewsController {
    public function index() {
        // Se forceUpdate=1, força atualização
        $forceUpdate = isset($_GET['forceUpdate']) && $_GET['forceUpdate'] == 1;
        
        // Se source=xxx, filtra por fonte
        $filters = [];
        if (isset($_GET['source']) && in_array($_GET['source'], ['G1', 'UOL', 'Folha'])) {
            $filters['source'] = $_GET['source'];
        }
        
        // Busca as notícias do banco em vez de usar o Scraper diretamente
        $repository = RepositoryFactory::createNewsRepository();
        
        // Verifica se precisa forçar atualização
        if ($forceUpdate) {
            // Usa o Scraper que agora já salva no banco
            $scraper = new Scraper();
            $news = $scraper->getAllPoliticalNews(true);
        } else {
            // Obtém direto do banco com filtros
            $news = $repository->getAll($filters);
        }
        
        $helper = new ViewHelper();
        
        // Inclui a view
        require_once __DIR__ . '/../Views/index.php';
    }
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Factories\RepositoryFactory.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Factories\RepositoryFactory.php

namespace App\Factories;

use App\Repositories\NewsRepositoryInterface;
use App\Repositories\MysqlNewsRepository;
use App\Repositories\MongoNewsRepository;
use App\Repositories\SqliteNewsRepository;
use App\Utils\Logger;

class RepositoryFactory
{
    public static function createNewsRepository(): NewsRepositoryInterface
    {
        $dbType = getenv('DB_TYPE') ?: 'sqlite';
        
        try {
            switch (strtolower($dbType)) {
                case 'mongodb':
                    return new MongoNewsRepository();
                    
                case 'mysql':
                    return new MysqlNewsRepository();
                    
                case 'sqlite':
                default:
                    return new SqliteNewsRepository();
            }
        } catch (\Exception $e) {
            Logger::error('Error creating repository: ' . $e->getMessage(), 'Factory');
            throw $e;
        }
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Factories\ScraperFactory.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Factories\ScraperFactory.php

namespace App\Factories;

use App\Models\G1Scraper;
use App\Models\UOLScraper;
use App\Models\FolhaScraper;

class ScraperFactory
{
    /**
     * Lê config/scrapers_config.php e instancia cada classe listada.
     *
     * @return array Array de instâncias de scrapers
     */
    public static function createAllScrapers(): array
    {
        // Carrega o array de nomes de classes do config
        $scraperClasses = require __DIR__ . '/../../../config/scrapers_config.php';

        $scrapers = [];
        foreach ($scraperClasses as $className) {
            // Constrói o nome completo da classe com namespace
            $fullClassName = 'App\\Models\\' . $className;
            
            // Verifica se a classe existe
            if (class_exists($fullClassName)) {
                // Instancia dinamicamente
                $scrapers[] = new $fullClassName();
            }
        }
        return $scrapers;
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\AbstractNewsScraper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\AbstractNewsScraper.php

namespace App\Models;

use App\Utils\HttpClient;
use App\Utils\Logger;
use App\Cache\CacheInterface;

/**
 * Classe abstrata que cuida de:
 * - Cache (getFromCache / saveToCache)
 * - Obter HTML via HttpClient
 * - Criação de DOMXPath (createDomXPath)
 * - Logging padronizado (log)
 */
abstract class AbstractNewsScraper implements NewsScraperInterface
{
    protected $cacheKey;
    protected $cacheTtl;
    protected $cache;

    public function __construct(string $cacheKey, int $cacheTtl = 600)
    {
        $this->cacheKey = $cacheKey;
        $this->cacheTtl = $cacheTtl;
        $this->cache = getCache(); // Função definida em config.php
    }

    /**
     * Tenta recuperar os dados do cache, se válido.
     */
    protected function getFromCache(): ?array
    {
        $result = $this->cache->get($this->cacheKey);
        
        if ($result !== null) {
            $this->log("Cache: Utilizando dados do cache para " . $this->cacheKey);
            return $result;
        }
        
        return null;
    }

    /**
     * Salva os dados no cache.
     */
    protected function saveToCache(array $data): void
    {
        $this->cache->set($this->cacheKey, $data, $this->cacheTtl);
        $this->log("Cache: Dados salvos com TTL de {$this->cacheTtl} segundos");
    }

    /**
     * Obtém o HTML de uma URL usando HttpClient.
     */
    protected function getHtml(string $url, array $headers = []): ?string
    {
        $this->log("getHtml: Buscando HTML de " . $url);
        return HttpClient::get($url, $headers);
    }

    /**
     * Cria um DOMDocument e DOMXPath a partir de uma string HTML, já tratando encoding e supressão de erros.
     */
    protected function createDomXPath(string $html): ?\DOMXPath
    {
        // Converter encoding para evitar problemas de caracteres
        $convmap = [0x80, 0x10FFFF, 0, 0x10FFFF];
        $html = mb_encode_numericentity($html, $convmap, 'UTF-8');

        $dom = new \DOMDocument(); // Note o \ para indicar namespace global
        libxml_use_internal_errors(true);
        $dom->loadHTML($html);
        libxml_clear_errors();

        return new \DOMXPath($dom); // Note o \ para indicar namespace global
    }

    /**
     * Método simples de log, para centralizar prefixos.
     */
    protected function log(string $message, $level = 'INFO'): void
    {
        Logger::log($message, $level, get_class($this));
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\FolhaScraper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\FolhaScraper.php

namespace App\Models;

class FolhaScraper extends AbstractNewsScraper
{
    public function __construct()
    {
        // Passa apenas a chave de cache e TTL
        parent::__construct('folha_news', 600); // ou uol_news, folha_news
        $this->log("Inicializado: Cache definido para 10 minutos.");
    }

    public function fetchNews(bool $forceUpdate = false): array
    {
        if (!$forceUpdate) {
            $cached = $this->getFromCache();
            if ($cached !== null) {
                $this->log("[Folha] | Cache: Utilizando dados do cache.");
                return $cached;
            }
        }
        
        $this->log("[Folha] | Scraping: Iniciando scraping da página de listagem.");
        $url = 'https://www1.folha.uol.com.br/poder/';
        $headers = [
            'User-Agent' => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
            'Referer'    => "https://www.google.com/"
        ];
        
        $html = $this->getHtml($url, $headers);
        if ($html === null) {
            $this->log("[Folha] | Erro: Falha ao obter HTML da listagem.");
            return [];
        }
        
        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[Folha] | Erro: Falha ao criar DOMXPath.");
            return [];
        }

        $newsItems = [];
        
        // Seleciona cada bloco <li> com a classe "c-headline c-headline--newslist"
        $nodes = $xpath->query("//li[contains(@class, 'c-headline') and contains(@class, 'c-headline--newslist')]");
        $this->log("[Folha] | Listagem: Nós encontrados = " . $nodes->length, LOG_INFO);
        $this->log("[UOL] | Listagem: Itens encontrados = " . $nodes->length, LOG_INFO);
        
        foreach ($nodes as $node) {
            // Extrai URL do artigo
            $linkNode = $xpath->query(".//div[contains(@class,'c-headline__content')]/a", $node);
            if (!$linkNode || $linkNode->length === 0) {
                continue;
            }
            $articleUrl = $linkNode->item(0)->getAttribute('href');

            // Título (pego da listagem)
            $titleNode = $xpath->query(".//h2[contains(@class,'c-headline__title')]", $node);
            $title = '';
            if ($titleNode && $titleNode->length > 0) {
                $title = trim($titleNode->item(0)->nodeValue);
            }

            // Descrição (pego da listagem)
            $descNode = $xpath->query(".//p[contains(@class,'c-headline__standfirst')]", $node);
            $description = 'Descrição não disponível.';
            if ($descNode && $descNode->length > 0) {
                $description = trim($descNode->item(0)->nodeValue);
            }

            // Data (pego da listagem)
            $timeNode = $xpath->query(".//time[contains(@class,'c-headline__dateline')]", $node);
            $publishedAt = ($timeNode->length > 0) ? 
                trim($timeNode->item(0)->getAttribute('datetime')) : 
                null; // Retornar null em vez de string

            // Autor (normalmente não aparece no listing, então vamos buscar na página do artigo)
            $author = 'Não disponível';

            // Agora buscamos dados detalhados no artigo individual
            $articleDetails = $this->scrapeArticle($articleUrl, $headers);
            if ($articleDetails) {
                // Se os detalhes tiverem autor, data ou até título/descrição melhores, use-os
                if (!empty($articleDetails['author'])) {
                    $author = $articleDetails['author'];
                }
                // Se quiser sobrepor título/descrição/data, também pode:
                // if (!empty($articleDetails['title'])) { $title = $articleDetails['title']; }
                // if (!empty($articleDetails['description'])) { $description = $articleDetails['description']; }
                // if (!empty($articleDetails['publishedAt']) && $articleDetails['publishedAt'] !== 'Data não informada.') {
                //    $publishedAt = $articleDetails['publishedAt'];
                // }
            }

            if ($title && $articleUrl) {
                $newsItems[] = [
                    'title'       => $title,
                    'url'         => $articleUrl,
                    'description' => $description,
                    'author'      => $author,
                    'published_at' => $publishedAt,  // modificado de publishedAt para published_at
                    'source'      => 'Folha'
                ];
            }
        }
        
        $this->log("[Folha] | Concluído: Scraping finalizado. Artigos encontrados = " . count($newsItems));
        $this->saveToCache($newsItems);
        return $newsItems;
    }

    /**
     * Faz uma segunda requisição para o artigo e extrai autor, data, etc.
     */
    private function scrapeArticle(string $articleUrl, array $headers): ?array
    {
        $this->log("[Folha] | scrapeArticle: Buscando HTML do artigo: " . $articleUrl);
        $html = $this->getHtml($articleUrl, $headers);
        if ($html === null) {
            $this->log("[Folha] | scrapeArticle: Erro ao obter HTML do artigo: " . $articleUrl);
            return null;
        }

        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[Folha] | scrapeArticle: Falha ao criar DOMXPath no artigo: " . $articleUrl);
            return null;
        }

        // Exemplo de como pegar o autor:
        //   <div class="c-news__wrap">
        //     <div class="c-signature">
        //       <strong class="c-signature__author">
        //         <a href="...">Catia Seabra</a>
        //       </strong>
        //     </div>
        //   </div>
        $authorNodes = $xpath->query("//div[contains(@class, 'c-news__wrap')]//div[contains(@class, 'c-signature')]//strong[contains(@class, 'c-signature__author')]/a");
        $author = ($authorNodes->length > 0)
            ? trim($authorNodes->item(0)->nodeValue)
            : 'Não disponível';

        $this->log("[Folha] | scrapeArticle: Autor extraído = " . $author);

        // Se quiser, pode extrair título, descrição, data daqui também.
        // Exemplo rápido (ajuste se for preciso):
        $titleNodes = $xpath->query("//h1[contains(@class, 'c-content-head__title')]");
        $title = $titleNodes->length > 0 ? trim($titleNodes->item(0)->nodeValue) : '';

        // Retorna só o que for precisar
        return [
            'author' => $author,
            'title'  => $title,
            // 'description' => ...,
            // 'publishedAt' => ...
        ];
    }
}
``` 


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\G1Scraper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\G1Scraper.php

namespace App\Models;

class G1Scraper extends AbstractNewsScraper
{
    public function __construct()
    {
        // Passa apenas a chave de cache e TTL
        parent::__construct('g1_news', 600); // ou uol_news, folha_news
        $this->log("Inicializado: Cache definido para 10 minutos.");
    }

    public function fetchNews(bool $forceUpdate = false): array
    {
        if (!$forceUpdate) {
            $cached = $this->getFromCache();
            if ($cached !== null) {
                $this->log("[G1] | Cache: Utilizando dados do cache.");
                return $cached;
            }
        }
        
        $this->log("[G1] | Scraping: Iniciando scraping da página de listagem.");
        $url = 'https://g1.globo.com/politica/';
        $headers = [
            'User-Agent' => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
        ];

        $html = $this->getHtml($url, $headers);
        if ($html === null) {
            $this->log("[G1] | Erro: Falha ao obter HTML da listagem.");
            return [];
        }
        
        // Em vez do DOMDocument manual, usamos:
        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[G1] | Erro: Falha ao criar DOMXPath.");
            return [];
        }

        $newsItems = [];
        
        // Seleciona os links dos artigos na página de listagem
        $nodes = $xpath->query("//a[contains(@class, 'feed-post-link')]");
        $this->log("[G1] | Listagem: Nós encontrados = " . $nodes->length, LOG_INFO);
        
        $articleLinks = [];
        foreach ($nodes as $node) {
            if (!$node instanceof \DOMElement) {
                continue;
            }
            $link = $node->getAttribute('href');
            if ($link && !in_array($link, $articleLinks)) {
                $articleLinks[] = $link;
            }
        }
        
        foreach ($articleLinks as $articleUrl) {
            $details = $this->scrapeArticle($articleUrl, $headers);
            if ($details) {
                $newsItems[] = $details;
            }
        }
        
        $this->log("[G1] | Concluído: Scraping finalizado. Artigos encontrados = " . count($newsItems));
        $this->saveToCache($newsItems);
        return $newsItems;
    }
    
    private function scrapeArticle(string $articleUrl, array $headers): ?array
    {
        $html = $this->getHtml($articleUrl, $headers);
        if ($html === null) {
            $this->log("[G1] | Erro: Falha ao obter HTML do artigo: " . $articleUrl);
            return null;
        }
        
        // Cria DOMXPath via método auxiliar
        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[G1] | Erro: DOMXPath nulo no artigo: " . $articleUrl);
            return null;
        }
        
        // Título
        $titleNodes = $xpath->query("//div[contains(@class, 'mc-article-header')]//h1[@itemprop='headline']");
        $title = $titleNodes->length > 0 ? trim($titleNodes->item(0)->nodeValue) : '';
        
        // Descrição
        $descNodes = $xpath->query("//div[contains(@class, 'mc-article-header')]//h2[contains(@class, 'content-head__subtitle') and @itemprop='alternativeHeadline']");
        $description = $descNodes->length > 0 ? trim($descNodes->item(0)->nodeValue) : 'Descrição não disponível.';

        // Data de publicação
        $timeNodes = $xpath->query("//div[contains(@class, 'mc-article-header')]//time[@itemprop='datePublished']");
        $publishedAt = ($timeNodes->length > 0) ? 
            trim($timeNodes->item(0)->getAttribute('datetime')) : 
            null; // Retornar null em vez de string
        
        // Autor
        $author = '';
        $authorNodes = $xpath->query("//div[contains(@class, 'mc-article-header')]//p[contains(@class, 'content-publication-data__from')]");
        if ($authorNodes->length > 0) {
            $aNodes = $xpath->query(".//a", $authorNodes->item(0));
            if ($aNodes->length > 0) {
                $author = trim($aNodes->item(0)->nodeValue);
            }
        }
        
        if (!$title) {
            $this->log("[G1] | Alerta: Título não extraído para artigo: " . $articleUrl);
            return null;
        }
        
        return [
            'title'       => $title,
            'url'         => $articleUrl,
            'description' => $description,
            'author'      => $author ?: 'Não disponível',
            'published_at' => $publishedAt ?: null,  // modificado de publishedAt para published_at
            'source'      => 'G1'
        ];
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\NewsScraperInterface.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\NewsScraperInterface.php

namespace App\Models;

interface NewsScraperInterface {
    /**
     * Método para buscar notícias do portal específico.
     *
     * @return array Array de notícias.
     */
    public function fetchNews(): array;
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\Scraper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\Scraper.php

namespace App\Models;

use App\Factories\ScraperFactory;
use App\Factories\RepositoryFactory;
use App\Repositories\NewsRepositoryInterface;

class Scraper
{
    private $scrapers = [];
    private $progressCallback = null;
    private $repository;

    public function __construct($progressCallback = null)
    {
        $this->scrapers = ScraperFactory::createAllScrapers();
        $this->progressCallback = $progressCallback;
        $this->repository = RepositoryFactory::createNewsRepository();
    }

    private function reportProgress($message) {
        if (is_callable($this->progressCallback)) {
            call_user_func($this->progressCallback, $message);
        }
    }

    public function getAllPoliticalNews(bool $forceUpdate = false): array
    {
        $news = [];
        
        if (!$forceUpdate) {
            // Tentar carregar do banco de dados
            $news = $this->repository->getAll();
            if (!empty($news)) {
                $this->reportProgress("Usando dados existentes do banco (" . count($news) . " notícias)");
                return $news;
            }
        }
        
        $this->reportProgress("Iniciando coleta de notícias políticas...");
        
        foreach ($this->scrapers as $scraper) {
            $scraperName = get_class($scraper);
            $this->reportProgress("Processando fonte: " . $scraperName);
            
            try {
                $startTime = microtime(true);
                $sourceNews = $scraper->fetchNews($forceUpdate);
                $endTime = microtime(true);
                $timeSpent = round($endTime - $startTime, 2);
                
                $this->reportProgress("Concluído " . $scraperName . ": " . count($sourceNews) . " notícias em " . $timeSpent . "s");
                $news = array_merge($news, $sourceNews);
            } catch (\Exception $e) {
                $this->reportProgress("ERRO em " . $scraperName . ": " . $e->getMessage());
            }
        }

        $this->reportProgress("Normalizando datas de " . count($news) . " notícias...");
        // Padronizar para usar apenas published_at
        foreach ($news as &$item) {
            if (isset($item['publishedAt']) && !isset($item['published_at'])) {
                // Converter de publishedAt para published_at
                $item['published_at'] = $this->normalizeDate($item['publishedAt']);
                // Remover o campo antigo para evitar duplicidade
                unset($item['publishedAt']);
            } elseif (isset($item['published_at'])) {
                // Normalizar o campo correto
                $item['published_at'] = $this->normalizeDate($item['published_at']);
            } else {
                // Garantir que sempre haja um campo published_at
                $item['published_at'] = date('Y-m-d\TH:i:sP');
            }
        }
        
        // Salvar no banco de dados
        $this->reportProgress("Salvando " . count($news) . " notícias no banco de dados...");
        $this->repository->saveMany($news);
        
        $this->reportProgress("Processamento completo. Total de notícias: " . count($news));
        return $news;
    }

    private function normalizeDate(string $date): string
    {
        // Se a data for um texto como "Data não informada.", retorna null
        if ($date === 'Data não informada.' || empty(trim($date))) {
            return "1970-01-01T00:00:00+00:00"; // Data padrão para não disponível
        }
        
        $date = trim($date);
        if (strpos($date, "T") !== false) {
            try {
                $dt = new \DateTime($date); // Note o uso de \ para indicar namespace global
                return $dt->format('Y-m-d\TH:i:sP');
            } catch (\Exception $e) { // Também namespace global para Exception
                // tenta formatos abaixo
            }
        }
        $dt = \DateTime::createFromFormat('Y-m-d H:i:s', $date, new \DateTimeZone('America/Sao_Paulo'));
        if ($dt !== false) {
            return $dt->format('Y-m-d\TH:i:sP');
        }
        $dt = \DateTime::createFromFormat('d/m/Y H:i:s', $date, new \DateTimeZone('America/Sao_Paulo'));
        if ($dt !== false) {
            return $dt->format('Y-m-d\TH:i:sP');
        }
        $dt = \DateTime::createFromFormat('d/m/Y H:i', $date, new \DateTimeZone('America/Sao_Paulo'));
        if ($dt !== false) {
            return $dt->format('Y-m-d\TH:i:sP');
        }
        if (strtotime($date) !== false) {
            $dt = new \DateTime($date);
            return $dt->format('Y-m-d\TH:i:sP');
        }
        return "1970-01-01T00:00:00+00:00";
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\UOLScraper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Models\UOLScraper.php

namespace App\Models;

class UOLScraper extends AbstractNewsScraper
{
    public function __construct()
    {
        parent::__construct('uol_news', 600);
        $this->log("Inicializado: Cache definido para 10 minutos.");
    }

    public function fetchNews(bool $forceUpdate = false): array
    {
        if (!$forceUpdate) {
            $cached = $this->getFromCache();
            if ($cached !== null) {
                $this->log("[UOL] | Cache: Utilizando dados do cache.");
                return $cached;
            }
        }
        
        $this->log("[UOL] | Scraping: Iniciando scraping da página de listagem.");
        $url = 'https://noticias.uol.com.br/politica/';
        $headers = [
            'User-Agent' => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
            'Referer'    => "https://www.google.com/"
        ];
        
        $html = $this->getHtml($url, $headers);
        if ($html === null) {
            $this->log("[UOL] | Erro: Falha ao obter HTML da listagem.");
            return [];
        }

        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[UOL] | Erro: Falha ao criar DOMXPath.");
            return [];
        }
        
        $newsItems = [];
        
        // Busca nós com a classe "thumbnails-item" (excluindo itemAds)
        $nodes = $xpath->query("//div[contains(@class, 'thumbnails-item') and not(contains(@class, 'itemAds'))]");
        $this->log("[UOL] | Listagem: Itens encontrados = " . $nodes->length, LOG_INFO);
        
        foreach ($nodes as $node) {
            if (!$node instanceof \DOMElement) continue;
            $aTag = $node->getElementsByTagName('a')->item(0);
            if (!$aTag) continue;
            $link = $aTag->getAttribute('href');
            
            $titleNodes = $xpath->query(".//h3[contains(@class, 'thumb-title')]", $node);
            $title = ($titleNodes->length > 0) ? trim($titleNodes->item(0)->nodeValue) : 'Sem título';
            
            // Data do listing
            $timeNodes = $xpath->query(".//*[contains(@class, 'thumb-date')]", $node);
            $publishedAt = ($timeNodes->length > 0) ? 
                trim($timeNodes->item(0)->getAttribute('datetime')) : 
                null; // Retornar null em vez de string
            
            $details = $this->scrapeArticle($link, $headers);
            if ($details) {
                // Se o artigo tiver data válida, substitui a data do listing
                if (!empty($details['published_at']) && $details['published_at'] !== null) {
                    $publishedAt = $details['published_at'];
                }
                $newsItems[] = [
                    'title'       => $title,
                    'url'         => $link,
                    'description' => $details['description'] ?? 'Descrição não disponível.',
                    'author'      => $details['author'] ?? 'Não disponível',
                    'published_at' => $publishedAt,
                    'source'      => 'UOL'
                ];
            } else {
                $newsItems[] = [
                    'title'       => $title,
                    'url'         => $link,
                    'description' => 'Descrição não disponível.',
                    'author'      => 'Não disponível',
                    'published_at' => $publishedAt,
                    'source'      => 'UOL'
                ];
            }
        }
        
        $this->log("[UOL] | Concluído: Scraping finalizado. Artigos encontrados = " . count($newsItems));
        $this->saveToCache($newsItems);
        return $newsItems;
    }
    
    private function scrapeArticle(string $articleUrl, array $headers): ?array
    {
        $html = $this->getHtml($articleUrl, $headers);
        if ($html === null) {
            $this->log("[UOL] | Erro: Falha ao obter HTML do artigo: " . $articleUrl);
            return null;
        }
        
        $xpath = $this->createDomXPath($html);
        if (!$xpath) {
            $this->log("[UOL] | Erro: DOMXPath nulo no artigo: " . $articleUrl);
            return null;
        }
        
        // Primeiro parágrafo do container "jupiter-paragraph-fragment"
        $paraNodes = $xpath->query("//div[contains(@class, 'jupiter-paragraph-fragment')]//p");
        $description = ($paraNodes->length > 0) ? trim($paraNodes->item(0)->nodeValue) : 'Descrição não disponível.';
        
        // Autor
        $authorNodes = $xpath->query("//div[contains(@class, 'solar-author-names')]//a[contains(@class, 'solar-author-name')]");
        $author = ($authorNodes->length > 0) ? trim($authorNodes->item(0)->nodeValue) : 'Não disponível';
        
        // Data
        $timeNodes = $xpath->query("//div[contains(@class, 'solar-date')]//time[@class='date']");
        $publishedAt = ($timeNodes->length > 0) ? 
            trim($timeNodes->item(0)->getAttribute('datetime')) : 
            null; // Retornar null em vez de string
        
        return [
            'description' => $description,
            'author'      => $author,
            'published_at' => $publishedAt
        ];
    }
}


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\MysqlNewsRepository.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\MysqlNewsRepository.php

namespace App\Repositories;

use Illuminate\Database\Capsule\Manager as DB;
use App\Utils\Logger;

class MysqlNewsRepository implements NewsRepositoryInterface
{
    public function __construct()
    {
        $this->setupConnection();
    }
    
    private function setupConnection()
    {
        $capsule = new DB;
        $capsule->addConnection([
            'driver' => 'mysql',
            'host' => getenv('DB_HOST') ?: '127.0.0.1',
            'port' => getenv('DB_PORT') ?: '3306',
            'database' => getenv('DB_DATABASE') ?: 'sistema_noticias',
            'username' => getenv('DB_USERNAME') ?: 'news_user',
            'password' => getenv('DB_PASSWORD') ?: '',
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'strict' => true,
            'engine' => null,
        ]);
        $capsule->setAsGlobal();
        $capsule->bootEloquent();
    }
    
    public function getAll(array $filters = []): array
    {
        try {
            $query = DB::table('news')
                ->select(
                    'news.id', 'news.title', 'news.url', 'news.description', 
                    'news.published_at', 'sources.name as source', 'authors.name as author'
                )
                ->leftJoin('sources', 'news.source_id', '=', 'sources.id')
                ->leftJoin('authors', 'news.author_id', '=', 'authors.id')
                ->orderBy('news.published_at', 'desc');
            
            // Aplicar filtros
            if (!empty($filters['source'])) {
                $query->where('sources.name', $filters['source']);
            }
            
            return $query->get()->toArray();
        } catch (\Exception $e) {
            Logger::error('Erro ao buscar notícias: ' . $e->getMessage(), 'Repository');
            return [];
        }
    }
    
    public function findByUrl(string $url)
    {
        try {
            return DB::table('news')
                ->select(
                    'news.id', 'news.title', 'news.url', 'news.description', 
                    'news.published_at', 'sources.name as source', 'authors.name as author'
                )
                ->leftJoin('sources', 'news.source_id', '=', 'sources.id')
                ->leftJoin('authors', 'news.author_id', '=', 'authors.id')
                ->where('news.url', $url)
                ->first();
        } catch (\Exception $e) {
            Logger::error('Erro ao buscar notícia por URL: ' . $e->getMessage(), 'Repository');
            return null;
        }
    }
    
    public function save(array $data): bool
    {
        try {
            DB::beginTransaction();
            
            // Buscar ou criar fonte
            $sourceId = $this->getOrCreateSource($data['source'] ?? 'Desconhecido');
            
            // Buscar ou criar autor
            $authorId = $this->getOrCreateAuthor($data['author'] ?? 'Desconhecido');
            
            // Verificar se a notícia já existe
            $existing = DB::table('news')->where('url', $data['url'])->first();
            
            // Garantir uso consistente de published_at
            $published_at = $data['published_at'] ?? $data['publishedAt'] ?? null;
            
            if ($existing) {
                // Atualizar
                DB::table('news')
                    ->where('id', $existing->id)
                    ->update([
                        'title' => $data['title'],
                        'description' => $data['description'] ?? '',
                        'published_at' => $published_at,
                        'source_id' => $sourceId,
                        'author_id' => $authorId,
                        'updated_at' => now()
                    ]);
            } else {
                // Inserir nova
                DB::table('news')->insert([
                    'title' => $data['title'],
                    'url' => $data['url'],
                    'description' => $data['description'] ?? '',
                    'published_at' => $published_at,
                    'source_id' => $sourceId,
                    'author_id' => $authorId,
                    'created_at' => now(),
                    'updated_at' => now()
                ]);
            }
            
            DB::commit();
            return true;
        } catch (\Exception $e) {
            DB::rollBack();
            Logger::error('Erro ao salvar notícia: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function saveMany(array $newsItems): bool
    {
        try {
            DB::beginTransaction();
            
            foreach ($newsItems as $item) {
                $this->save($item);
            }
            
            DB::commit();
            return true;
        } catch (\Exception $e) {
            DB::rollBack();
            Logger::error('Erro ao salvar múltiplas notícias: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function delete(int $id): bool
    {
        try {
            return DB::table('news')->where('id', $id)->delete() > 0;
        } catch (\Exception $e) {
            Logger::error('Erro ao excluir notícia: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function clear(): bool
    {
        try {
            DB::table('news')->truncate();
            return true;
        } catch (\Exception $e) {
            Logger::error('Erro ao limpar notícias: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    private function getOrCreateSource(string $sourceName): int
    {
        $source = DB::table('sources')->where('name', $sourceName)->first();
        if ($source) {
            return $source->id;
        }
        
        return DB::table('sources')->insertGetId([
            'name' => $sourceName,
            'website' => $this->getWebsiteFromSource($sourceName),
            'created_at' => now()
        ]);
    }
    
    private function getOrCreateAuthor(string $authorName): int
    {
        $author = DB::table('authors')->where('name', $authorName)->first();
        if ($author) {
            return $author->id;
        }
        
        return DB::table('authors')->insertGetId([
            'name' => $authorName,
            'created_at' => now()
        ]);
    }
    
    private function getWebsiteFromSource(string $sourceName): string
    {
        switch ($sourceName) {
            case 'G1': return 'https://g1.globo.com/';
            case 'UOL': return 'https://noticias.uol.com.br/';
            case 'Folha': return 'https://www1.folha.uol.com.br/';
            default: return 'https://exemplo.com.br/';
        }
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\NewsRepositoryInterface.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\NewsRepositoryInterface.php

namespace App\Repositories;

interface NewsRepositoryInterface
{
    /**
     * Retorna todas as notícias
     */
    public function getAll(array $filters = []): array;
    
    /**
     * Busca uma notícia pelo URL
     */
    public function findByUrl(string $url);
    
    /**
     * Salva uma notícia (nova ou existente)
     */
    public function save(array $data): bool;
    
    /**
     * Salva múltiplas notícias de uma vez
     */
    public function saveMany(array $newsItems): bool;
    
    /**
     * Exclui uma notícia
     */
    public function delete(int $id): bool;
    
    /**
     * Limpa todas as notícias
     */
    public function clear(): bool;
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\SqliteNewsRepository.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Repositories\SqliteNewsRepository.php

namespace App\Repositories;

use App\Utils\Logger;
use PDO;

class SqliteNewsRepository implements NewsRepositoryInterface
{
    private $db;
    
    public function __construct()
    {
        $dbPath = __DIR__ . '/../../../database.sqlite';
        $this->initializeDatabase($dbPath);
    }
    
    private function initializeDatabase(string $dbPath)
    {
        try {
            // Criar arquivo se não existir
            $dirPath = dirname($dbPath);
            if (!is_dir($dirPath)) {
                mkdir($dirPath, 0777, true);
            }
            
            $this->db = new PDO("sqlite:$dbPath");
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            
            // Criar tabela se não existir
            $this->db->exec("
                CREATE TABLE IF NOT EXISTS news (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    url TEXT UNIQUE NOT NULL,
                    description TEXT,
                    source TEXT NOT NULL,
                    author TEXT,
                    published_at TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ");
        } catch (\Exception $e) {
            Logger::error('Database initialization error: ' . $e->getMessage(), 'Repository');
            throw $e;
        }
    }
    
    public function getAll(array $filters = []): array
    {
        try {
            $query = "SELECT * FROM news";
            $params = [];
            
            // Adicionar filtros se existirem
            if (!empty($filters['source'])) {
                $query .= " WHERE source = :source";
                $params[':source'] = $filters['source'];
            }
            
            // Adicionar pesquisa de texto se especificada
            if (!empty($filters['search'])) {
                $whereClause = (strpos($query, 'WHERE') !== false) ? 'AND' : 'WHERE';
                $query .= " $whereClause (title LIKE :search OR description LIKE :search)";
                $params[':search'] = '%'.$filters['search'].'%';
            }
            
            $query .= " ORDER BY published_at DESC";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            Logger::error('Error getting all news: ' . $e->getMessage(), 'Repository');
            return [];
        }
    }
    
    public function findByUrl(string $url)
    {
        try {
            $stmt = $this->db->prepare("SELECT * FROM news WHERE url = :url LIMIT 1");
            $stmt->bindValue(':url', $url);
            $stmt->execute();
            
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            Logger::error('Error finding news by URL: ' . $e->getMessage(), 'Repository');
            return null;
        }
    }
    
    public function save(array $data): bool
    {
        try {
            // Verificar se já existe
            $exists = $this->findByUrl($data['url']);
            
            // Simplificar para usar apenas published_at, com fallback
            $published_at = $data['published_at'] ?? $data['publishedAt'] ?? date('Y-m-d H:i:s');
            
            if ($exists) {
                // Atualizar
                $stmt = $this->db->prepare("
                    UPDATE news SET 
                    title = :title,
                    description = :description,
                    source = :source,
                    author = :author,
                    published_at = :published_at,
                    updated_at = CURRENT_TIMESTAMP
                    WHERE url = :url
                ");
            } else {
                // Inserir
                $stmt = $this->db->prepare("
                    INSERT INTO news (
                        title, url, description, source, author, published_at
                    ) VALUES (
                        :title, :url, :description, :source, :author, :published_at
                    )
                ");
            }
            
            // Definir parâmetros
            $stmt->bindValue(':title', $data['title']);
            $stmt->bindValue(':url', $data['url']);
            $stmt->bindValue(':description', $data['description'] ?? '');
            $stmt->bindValue(':source', $data['source'] ?? 'Desconhecido');
            $stmt->bindValue(':author', $data['author'] ?? 'Desconhecido');
            $stmt->bindValue(':published_at', $published_at);
            
            return $stmt->execute();
        } catch (\Exception $e) {
            Logger::error('Error saving news: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function saveMany(array $newsItems): bool
    {
        try {
            $this->db->beginTransaction();
            
            foreach ($newsItems as $item) {
                if (!$this->save($item)) {
                    throw new \Exception("Failed to save item: " . json_encode($item));
                }
            }
            
            $this->db->commit();
            return true;
        } catch (\Exception $e) {
            $this->db->rollBack();
            Logger::error('Error saving multiple news: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function delete(int $id): bool
    {
        try {
            $stmt = $this->db->prepare("DELETE FROM news WHERE id = :id");
            $stmt->bindValue(':id', $id);
            return $stmt->execute();
        } catch (\Exception $e) {
            Logger::error('Error deleting news: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
    
    public function clear(): bool
    {
        try {
            $this->db->exec("DELETE FROM news");
            return true;
        } catch (\Exception $e) {
            Logger::error('Error clearing news table: ' . $e->getMessage(), 'Repository');
            return false;
        }
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Utils\HttpClient.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Utils\HttpClient.php

namespace App\Utils;

class HttpClient {
    /**
     * Executa uma requisição GET na URL informada com os headers fornecidos.
     */
    public static function get(string $url, array $headers = []): ?string {
        // Ajusta o tempo máximo de execução do script para 15 segundos
        set_time_limit(15);
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        // Define o tempo máximo de execução para o cURL (em segundos)
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        // Define o tempo máximo de conexão (em segundos)
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);

        if (!empty($headers)) {
            $formattedHeaders = [];
            foreach ($headers as $key => $value) {
                $formattedHeaders[] = $key . ": " . $value;
            }
            curl_setopt($ch, CURLOPT_HTTPHEADER, $formattedHeaders);
        }
        
        $html = curl_exec($ch);
        if ($html === false) {
            debug_log("[HttpClient] | Erro ao obter HTML de $url: " . curl_error($ch));
            curl_close($ch);
            return null;
        }
        curl_close($ch);
        return $html;
    }
}
?>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Utils\Logger.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Utils\Logger.php

namespace App\Utils;

class Logger
{
    /**
     * Registra mensagem de log com nível específico
     * 
     * @param string $message Mensagem a ser registrada
     * @param string $level Nível do log (INFO, WARNING, ERROR, DEBUG)
     * @param string $context Contexto opcional para o log
     * @return bool Sucesso da operação
     */
    public static function log($message, $level = 'INFO', $context = '')
    {
        return debug_log($message, $level, $context);
    }
    
    public static function info($message, $context = '')
    {
        return self::log($message, 'INFO', $context);
    }
    
    public static function warning($message, $context = '')
    {
        return self::log($message, 'WARNING', $context);
    }
    
    public static function error($message, $context = '')
    {
        return self::log($message, 'ERROR', $context);
    }
    
    public static function debug($message, $context = '')
    {
        return self::log($message, 'DEBUG', $context);
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Views\admin.php
================================================================================

<?php
// app/views/admin.php
?>
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Administração - Sistema de Notícias</title>
    
    <!-- CSS externos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    
    <!-- CSS do sistema -->
    <link rel="stylesheet" href="/assets/css/main.css">
    <link rel="stylesheet" href="/assets/css/logs.css">
    <link rel="stylesheet" href="/assets/css/dark-mode.css">
    <link rel="stylesheet" href="/assets/css/admin.css">
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- JavaScript do sistema -->
    <script src="/assets/js/dark-mode.js"></script>
    <script src="/assets/js/logs.js"></script>
    <script src="/assets/js/admin.js"></script>
</head>
<body>
    <!-- Botão de modo escuro -->
    <button id="dark-mode-toggle" class="dark-mode-toggle" aria-label="Alternar modo escuro">
        <i class="fas fa-moon"></i>
    </button>

    <div class="admin-header">
        <h1>Painel Administrativo</h1>
        <a href="/" class="back-link"><i class="fas fa-arrow-left"></i> Voltar para o site</a>
    </div>

    <div class="admin-container">
        <!-- Painel de estatísticas gerais -->
        <div class="admin-panel">
            <h2><i class="fas fa-chart-bar"></i> Estatísticas do Sistema</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="total-news">
                        <?php echo count($news ?? []); ?>
                    </div>
                    <div class="stat-label">Notícias</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="total-sources">
                        <?php 
                            $sources = array_unique(array_column($news ?? [], 'source'));
                            echo count($sources);
                        ?>
                    </div>
                    <div class="stat-label">Fontes</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="last-update">
                        <?php
                            $cacheFile = CACHE_DIR . '/all_news.json';
                            echo file_exists($cacheFile) ? date("d/m H:i", filemtime($cacheFile)) : 'N/A';
                        ?>
                    </div>
                    <div class="stat-label">Atualização</div>
                </div>
            </div>
        </div>

        <!-- Seção de administração de cache - Movida da página principal -->
        <div class="admin-panel">
            <h2><i class="fas fa-database"></i> Gerenciamento de Cache</h2>
            <div class="cache-stats">
                <?php
                $stats = \App\Cache\CacheManager::getStats();
                ?>
                <div class="stat-item">
                    <span class="label">Tipo de Cache:</span>
                    <span class="value"><?php echo $stats['type']; ?></span>
                </div>
                <div class="stat-item">
                    <span class="label">TTL Padrão:</span>
                    <span class="value"><?php echo $stats['ttl']; ?> segundos</span>
                </div>
                <div class="stat-item">
                    <span class="label">Status:</span>
                    <span class="value <?php echo $stats['status'] === 'ativo' ? 'active' : 'inactive'; ?>">
                        <?php echo $stats['status']; ?>
                    </span>
                </div>
            </div>
            
            <div class="cache-actions">
                <button id="clear-cache-btn" class="admin-btn btn-warning">
                    <i class="fas fa-trash-alt"></i> Limpar Cache
                </button>
                <button id="warm-cache-btn" class="admin-btn btn-info">
                    <i class="fas fa-fire"></i> Pré-aquecer Cache
                </button>
            </div>
        </div>

        <!-- Área para exibir os logs de depuração - Movida da página principal -->
        <div id="debug-container" class="admin-panel">
            <div id="debug-header">
                <h2><i class="fas fa-file-alt"></i> Log do Sistema</h2>
                <div class="debug-filters">
                    <label><input type="checkbox" class="log-filter" value="INFO" checked> INFO</label>
                    <label><input type="checkbox" class="log-filter" value="WARNING" checked> WARNING</label>
                    <label><input type="checkbox" class="log-filter" value="ERROR" checked> ERROR</label>
                    <label><input type="checkbox" class="log-filter" value="DEBUG" checked> DEBUG</label>
                    <button id="clear-logs-btn" title="Limpa a visualização dos logs (não apaga o arquivo)">Limpar Visualização</button>
                    <span id="log-count"></span>
                </div>
                <div class="debug-search">
                    <input type="text" id="log-search" placeholder="Buscar nos logs...">
                    <button id="search-btn">Buscar</button>
                </div>
            </div>
            <div id="debug-log">
                <div class="log-container">
                <?php 
                if (defined('LOG_FILE') && file_exists(LOG_FILE)) {
                    $lines = file(LOG_FILE, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                    $lines = array_reverse($lines); // Mais recentes primeiro
                    
                    // Armazena o número total de logs
                    $logCount = count($lines);
                    
                    // Limita a exibição aos 100 logs mais recentes para melhor desempenho
                    $displayLines = array_slice($lines, 0, 100);
                    
                    foreach ($displayLines as $line) {
                        // Extrair os componentes do log: data, nível, contexto, mensagem
                        if (preg_match('/\[([\d\- :]+)\]\[(INFO|WARNING|ERROR|DEBUG)\](?:\[(.*?)\])?\s*(.*)/', $line, $matches)) {
                            $timestamp = $matches[1];
                            $logLevel = $matches[2];
                            $context = !empty($matches[3]) ? $matches[3] : '';
                            $logContent = $matches[4];
                        } else {
                            // Fallback para outros formatos
                            if (preg_match('/\[([\d\- :]+)\]/', $line, $dateMatch)) {
                                $timestamp = $dateMatch[1];
                                
                                if (stripos($line, 'erro') !== false || stripos($line, 'falha') !== false) {
                                    $logLevel = 'ERROR';
                                } else if (stripos($line, 'aviso') !== false || stripos($line, 'alerta') !== false) {
                                    $logLevel = 'WARNING';
                                } else if (stripos($line, 'debug') !== false) {
                                    $logLevel = 'DEBUG';
                                } else {
                                    $logLevel = 'INFO';
                                }
                                
                                if (preg_match('/\]\[(.*?)\]/', $line, $contextMatch)) {
                                    $context = $contextMatch[1];
                                } else {
                                    $context = '';
                                }
                                
                                $logContent = preg_replace('/^\[.*?\](\[.*?\])*\s*/', '', $line);
                            } else {
                                $timestamp = '';
                                $logLevel = 'INFO';
                                $context = '';
                                $logContent = $line;
                            }
                        }
                        
                        $logClass = 'log-' . strtolower($logLevel);
                        
                        echo "<div class='log-entry $logClass' data-level='$logLevel'>";
                        echo "<span class='log-timestamp'>$timestamp</span>";
                        echo "<span class='log-level'>$logLevel</span>";
                        if ($context) {
                            echo "<span class='log-context'>$context</span>";
                        }
                        echo "<span class='log-message'>" . htmlspecialchars($logContent) . "</span>";
                        echo "</div>";
                    }
                    
                    if ($logCount > 100) {
                        echo "<div class='log-entry log-more'>+ " . ($logCount - 100) . " logs adicionais não exibidos (total: $logCount)</div>";
                    }
                } else {
                    echo "<div class='log-empty'>Nenhum log encontrado.</div>";
                }
                ?>
                </div>
            </div>
        </div>
    </div>

    <script>
    $(document).ready(function() {
        $('#clear-cache-btn').click(function() {
            if (confirm("Tem certeza que deseja limpar todo o cache?")) {
                $.post('/api/cache.php', { action: 'clear' })
                    .done(function(response) {
                        alert(response.message);
                        if (response.success) {
                            $('#last-update').text('N/A');
                        }
                    })
                    .fail(function() {
                        alert("Erro de comunicação com o servidor");
                    });
            }
        });
        
        $('#warm-cache-btn').click(function() {
            if (confirm("Iniciar pré-aquecimento do cache?")) {
                $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processando...');
                
                $.post('/api/cache.php', { action: 'warm' })
                    .done(function(response) {
                        alert(response.message);
                        if (response.success) {
                            location.reload();
                        } else {
                            $('#warm-cache-btn').prop('disabled', false).html('<i class="fas fa-fire"></i> Pré-aquecer Cache');
                        }
                    })
                    .fail(function() {
                        alert("Erro de comunicação com o servidor");
                        $('#warm-cache-btn').prop('disabled', false).html('<i class="fas fa-fire"></i> Pré-aquecer Cache');
                    });
            }
        });
    });
    </script>
</body>
</html>

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Views\index.php
================================================================================

<?php
// app/views/index.php
?>
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notícias de Política</title>
    
    <!-- CSS externos -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    
    <!-- CSS do sistema -->
    <link rel="stylesheet" href="/assets/css/main.css">
    <link rel="stylesheet" href="/assets/css/cards.css">
    <link rel="stylesheet" href="/assets/css/table.css">
    <link rel="stylesheet" href="/assets/css/logs.css">
    <link rel="stylesheet" href="/assets/css/dark-mode.css">
    
    <!-- jQuery e DataTables -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    
    <!-- JavaScript do sistema -->
    <script src="/assets/js/main.js"></script>
    <script src="/assets/js/dark-mode.js"></script>
    <script src="/assets/js/view-switcher.js"></script>
    <script src="/assets/js/universal-search.js"></script>
    <script src="/assets/js/scraper.js"></script>
    <script src="/assets/js/logs.js"></script>
</head>
<body>
    <!-- Botão de modo escuro -->
    <button id="dark-mode-toggle" class="dark-mode-toggle" aria-label="Alternar modo escuro">
        <i class="fas fa-moon"></i>
    </button>

    <h1>Notícias de Política</h1>
    <?php 
        require_once __DIR__ . '/../../../config/config.php';
        $cacheFile = CACHE_DIR . '/all_news.json';
        $cacheTime = 600; // 10 minutos
    ?>
    <!-- Update info existente -->
    <div id="update-info" class="update-info">
        <div class="update-info-icon">
            <i class="fas fa-sync-alt"></i>
        </div>
        <div class="update-info-content">
            <?php if (file_exists($cacheFile)): ?>
                <div class="update-data">
                    <div>
                        <span class="label">Última atualização:</span>
                        <span class="value"><?php echo date("d/m/Y H:i:s", filemtime($cacheFile)); ?></span>
                    </div>
                    <div>
                        <span class="label">Próxima atualização:</span>
                        <span class="value"><?php echo date("d/m/Y H:i:s", filemtime($cacheFile) + $cacheTime); ?></span>
                    </div>
                    <div>
                        <span class="label">Total de notícias:</span>
                        <span class="value"><?php echo count($news); ?></span>
                    </div>
                </div>
            <?php else: ?>
                <div class="update-empty">Nenhuma atualização realizada</div>
            <?php endif; ?>
        </div>
        <button id="force-update-btn" class="btn btn-primary">
            <i class="fas fa-sync-alt"></i> Forçar Atualização
        </button>
    </div>
    
    <!-- Campo de busca universal -->
    <div class="search-container">
        <div class="search-box">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="universal-search" placeholder="Buscar notícias..." class="search-input">
            <button id="clear-search" class="search-clear" title="Limpar busca">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Controles de filtro -->
    <div class="controls-container">
        <div class="source-filters">
            <span class="filter-title">Filtrar por fonte:</span>
            <button class="source-filter active" data-source="all">Todas</button>
            <button class="source-filter" data-source="g1">G1</button>
            <button class="source-filter" data-source="uol">UOL</button>
            <button class="source-filter" data-source="folha">Folha</button>
        </div>
        <div class="view-controls">
            <span class="filter-title">Visualização:</span>
            <button id="grid-view-btn" class="view-btn active" title="Visualização em cards">
                <i class="fas fa-th-large"></i>
            </button>
            <button id="table-view-btn" class="view-btn" title="Visualização em tabela">
                <i class="fas fa-table"></i>
            </button>
        </div>
    </div>

    <!-- Visualizações de notícia -->
    <?php if (isset($news) && is_array($news) && count($news) > 0): ?>
        <!-- Visualização em cards -->
        <div class="news-grid" id="grid-view">
            <?php foreach ($news as $item): ?>
                <div class="news-card">
                    <span class="news-source <?php echo strtolower($item['source']); ?>">
                        <?php echo $item['source']; ?>
                    </span>
                    <h3 class="news-title">
                        <a href="<?php echo $item['url']; ?>" target="_blank">
                            <?php echo $item['title'] ?? 'Sem título'; ?>
                        </a>
                    </h3>
                    <p class="news-description"><?php echo $item['description'] ?: 'Descrição não disponível.'; ?></p>
                    <div class="news-meta">
                        <span class="news-date">
                            <?php 
                            if (!empty($item['published_at']) && $item['published_at'] !== "1970-01-01T00:00:00+00:00") {
                                echo '<i class="fas fa-calendar-alt"></i> ' . date("d/m/Y H:i", strtotime($item['published_at']));
                            } else {
                                echo '<i class="fas fa-calendar-alt"></i> Data não disponível';
                            }
                            ?>
                        </span>
                        <span class="news-author">
                            <?php if ($item['author'] && $item['author'] !== 'Não disponível'): ?>
                                <i class="fas fa-user"></i> <?php echo $item['author']; ?>
                            <?php endif; ?>
                        </span>
                    </div>
                </div>
            <?php endforeach; ?>
        </div>
        
        <!-- Visualização em tabela -->
        <div id="table-view" style="display: none;">
            <table id="newsTable" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Título</th>
                        <th>Fonte</th>
                        <th>Autor</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($news as $item): ?>
                    <tr>
                        <td data-order="<?php echo isset($item['published_at']) ? $item['published_at'] : ''; ?>">
                            <?php 
                            if (!empty($item['published_at']) && $item['published_at'] !== "1970-01-01T00:00:00+00:00") {
                                echo date("d/m/Y H:i", strtotime($item['published_at']));
                            } else {
                                echo "Data não disponível";
                            }
                            ?>
                        </td>
                        <td>
                            <a href="<?php echo $item['url']; ?>" target="_blank" class="news-link">
                                <?php echo $item['title'] ?? 'Sem título'; ?>
                            </a>
                            <?php if (!empty($item['description'])): ?>
                            <div class="description-preview">
                                <?php echo $item['description']; ?>
                            </div>
                            <?php endif; ?>
                        </td>
                        <td>
                            <span class="source-badge <?php echo strtolower($item['source']); ?>">
                                <?php echo $item['source']; ?>
                            </span>
                        </td>
                        <td><?php echo $item['author'] ?? 'Não disponível'; ?></td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    <?php else: ?>
        <p>Nenhuma notícia encontrada.</p>
    <?php endif; ?>

    <!-- Adicionar link para a área administrativa -->
    <div class="admin-link-container">
        <a href="/admin" class="admin-link">
            <i class="fas fa-cog"></i> Área Administrativa
        </a>
    </div>

    <!-- Scripts JS permanecem os mesmos -->
</body>
</html>


================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Views\Helpers\ViewHelper.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\src\App\Views\Helpers\ViewHelper.php

namespace App\Views\Helpers;

class ViewHelper
{
    /**
     * Formata a data para exibição
     */
    public static function formatDate($date, $format = 'd/m/Y H:i')
    {
        if (empty($date) || $date === "1970-01-01T00:00:00+00:00") {
            return "Data não disponível";
        }
        
        return date($format, strtotime($date));
    }
    
    /**
     * Trunca um texto para exibição
     */
    public static function truncate($text, $length = 100)
    {
        if (strlen($text) <= $length) {
            return $text;
        }
        
        return substr($text, 0, $length) . '...';
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestCase.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestCase.php

namespace Tests;

use PHPUnit\Framework\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    /**
     * Carrega um arquivo HTML de teste
     *
     * @param string $filename Nome do arquivo em tests/TestData
     * @return string Conteúdo do arquivo
     */
    protected function loadTestHtml(string $filename): string
    {
        $path = __DIR__ . '/TestData/' . $filename;
        if (!file_exists($path)) {
            $this->fail("Arquivo de teste não encontrado: $path");
        }
        return file_get_contents($path);
    }
    
    /**
     * Cria um mock para HttpClient para retornar HTML predefinido
     *
     * @param string $htmlContent Conteúdo HTML para retornar
     * @return void
     */
    protected function mockHttpClient(string $htmlContent): void
    {
        // Cria um mock da classe HttpClient usando uma função anônima
        // que substitui o método estático get()
        $mock = \Mockery::mock('alias:App\Utils\HttpClient');
        $mock->shouldReceive('get')
            ->withAnyArgs()
            ->andReturn($htmlContent);
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Cache\FileCacheTest.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Cache\FileCacheTest.php

namespace Tests\Cache;

use App\Cache\FileCache;
use Tests\TestCase;

class FileCacheTest extends TestCase
{
    private $cache;
    private $tempDir;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Criar diretório temporário para testes
        $this->tempDir = __DIR__ . '/../temp/cache_test_' . uniqid();
        if (!is_dir($this->tempDir)) {
            mkdir($this->tempDir, 0777, true);
        }
        
        $this->cache = new FileCache([
            'directory' => $this->tempDir,
            'prefix' => 'test_',
            'ttl' => 10
        ]);
    }
    
    public function testSetAndGet()
    {
        $key = 'test_key';
        $value = ['name' => 'Test', 'value' => 123];
        
        // Verificar que o valor ainda não existe
        $this->assertNull($this->cache->get($key));
        
        // Armazenar o valor
        $result = $this->cache->set($key, $value);
        $this->assertTrue($result);
        
        // Verificar que o valor foi armazenado corretamente
        $storedValue = $this->cache->get($key);
        $this->assertEquals($value, $storedValue);
    }
    
    public function testHas()
    {
        $key = 'test_exists';
        $value = 'test value';
        
        // Verificar que o valor ainda não existe
        $this->assertFalse($this->cache->has($key));
        
        // Armazenar o valor
        $this->cache->set($key, $value);
        
        // Verificar que o valor existe agora
        $this->assertTrue($this->cache->has($key));
    }
    
    public function testDelete()
    {
        $key = 'test_delete';
        $this->cache->set($key, 'value to delete');
        
        // Verificar que o valor existe
        $this->assertTrue($this->cache->has($key));
        
        // Excluir e verificar
        $result = $this->cache->delete($key);
        $this->assertTrue($result);
        $this->assertFalse($this->cache->has($key));
    }
    
    public function testClear()
    {
        // Adicionar vários itens
        $this->cache->set('key1', 'value1');
        $this->cache->set('key2', 'value2');
        
        // Verificar que existem
        $this->assertTrue($this->cache->has('key1'));
        $this->assertTrue($this->cache->has('key2'));
        
        // Limpar e verificar
        $result = $this->cache->clear();
        $this->assertTrue($result);
        $this->assertFalse($this->cache->has('key1'));
        $this->assertFalse($this->cache->has('key2'));
    }
    
    public function testExpiration()
    {
        $key = 'test_expiration';
        
        // Armazenar com TTL de 1 segundo
        $this->cache->set($key, 'expiring soon', 1);
        
        // Verificar que existe imediatamente
        $this->assertTrue($this->cache->has($key));
        
        // Aguardar a expiração
        sleep(2);
        
        // Verificar que expirou
        $this->assertFalse($this->cache->has($key));
        $this->assertNull($this->cache->get($key));
    }
    
    public function testRemember()
    {
        $key = 'test_remember';
        $callCount = 0;
        
        // Função que será chamada apenas uma vez
        $callback = function() use (&$callCount) {
            $callCount++;
            return "Value generated, count: $callCount";
        };
        
        // Primeira chamada - deve executar o callback
        $value1 = $this->cache->remember($key, 10, $callback);
        $this->assertEquals("Value generated, count: 1", $value1);
        $this->assertEquals(1, $callCount);
        
        // Segunda chamada - deve usar o cache
        $value2 = $this->cache->remember($key, 10, $callback);
        $this->assertEquals("Value generated, count: 1", $value2);
        $this->assertEquals(1, $callCount); // o contador ainda é 1
    }
    
    protected function tearDown(): void
    {
        // Remover diretório temporário
        $this->removeDirectory($this->tempDir);
        parent::tearDown();
    }
    
    private function removeDirectory($dir)
    {
        if (!is_dir($dir)) {
            return;
        }
        
        $files = array_diff(scandir($dir), ['.', '..']);
        foreach ($files as $file) {
            $path = "$dir/$file";
            is_dir($path) ? $this->removeDirectory($path) : unlink($path);
        }
        
        return rmdir($dir);
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Cache\RedisCacheTest.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Cache\RedisCacheTest.php

namespace Tests\Cache;

use App\Cache\RedisCache;
use Tests\TestCase;
use Mockery;
use Predis\Client;

class RedisCacheTest extends TestCase
{
    private $mockRedis;
    private $cache;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Criar o mock do cliente Redis
        $this->mockRedis = Mockery::mock('Predis\Client');
        
        $this->cache = new class($this->mockRedis) extends RedisCache {
            // Declarar as propriedades explicitamente
            protected $redis;
            protected $prefix;
            protected $defaultTtl;
            private $mockClient;
            
            public function __construct($mockClient)
            {
                $this->mockClient = $mockClient;
                $this->prefix = 'test_';
                $this->defaultTtl = 600;
                // Não inicializa $redis aqui, será feito via reflection
            }
        };
        
        // Injetar o mock diretamente na propriedade $redis usando reflexão
        $reflection = new \ReflectionClass($this->cache);
        $property = $reflection->getProperty('redis');
        $property->setAccessible(true);
        $property->setValue($this->cache, $this->mockRedis);
    }
    
    public function testSetAndGet()
    {
        $key = 'test_key';
        $value = ['name' => 'Test', 'value' => 123];
        $encodedValue = json_encode($value);
        
        // Configurar expectativas do mock
        $this->mockRedis->shouldReceive('setex')
            ->once()
            ->with('test_' . $key, 600, $encodedValue)
            ->andReturn('OK');
            
        $this->mockRedis->shouldReceive('get')
            ->once()
            ->with('test_' . $key)
            ->andReturn($encodedValue);
        
        // Testar o método set
        $this->assertTrue($this->cache->set($key, $value));
        
        // Testar o método get
        $this->assertEquals($value, $this->cache->get($key));
    }
    
    public function testHas()
    {
        $key = 'test_exists';
        
        // Configurar expectativas do mock
        $this->mockRedis->shouldReceive('exists')
            ->once()
            ->with('test_' . $key)
            ->andReturn(1);
        
        // Verificar que o método has funciona
        $this->assertTrue($this->cache->has($key));
    }
    
    public function testDelete()
    {
        $key = 'test_delete';
        
        // Configurar expectativas do mock
        $this->mockRedis->shouldReceive('del')
            ->once()
            ->with('test_' . $key)
            ->andReturn(1);
        
        // Verificar que o método delete funciona
        $this->assertTrue($this->cache->delete($key));
    }
    
    public function testClear()
    {
        // Configurar expectativas do mock para keys e del
        $this->mockRedis->shouldReceive('keys')
            ->once()
            ->with('test_*')
            ->andReturn(['test_key1', 'test_key2']);
            
        $this->mockRedis->shouldReceive('del')
            ->once()
            ->with(['test_key1', 'test_key2'])
            ->andReturn(2);
        
        // Verificar que o método clear funciona
        $this->assertTrue($this->cache->clear());
    }
    
    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }
}

class RedisCache implements CacheInterface
{
    protected $redis;
    protected $prefix;
    protected $defaultTtl;
    // ...
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Repositories\NewsRepositoryTest.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Repositories\NewsRepositoryTest.php

namespace Tests\Repositories;

use App\Factories\RepositoryFactory;
use Tests\TestCase;

class NewsRepositoryTest extends TestCase
{
    protected $repository;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Configurar variável de ambiente para teste
        putenv('DB_DATABASE=sistema_noticias_test');
        
        $this->repository = RepositoryFactory::createNewsRepository();
        
        // Limpar dados de teste existentes
        $this->repository->clear();
    }
    
    public function testSaveAndGet()
    {
        // Criar uma notícia de teste
        $newsItem = [
            'title' => 'Notícia de Teste',
            'url' => 'https://teste.com/noticia-' . uniqid(),
            'description' => 'Descrição de teste',
            'publishedAt' => date('Y-m-d\TH:i:s'),
            'source' => 'G1',
            'author' => 'Autor Teste'
        ];
        
        // Salvar
        $result = $this->repository->save($newsItem);
        $this->assertTrue($result);
        
        // Recuperar todas as notícias
        $allNews = $this->repository->getAll();
        $this->assertCount(1, $allNews);
        $this->assertEquals($newsItem['title'], $allNews[0]['title']);
        
        // Buscar por URL
        $found = $this->repository->findByUrl($newsItem['url']);
        $this->assertNotNull($found);
        $this->assertEquals($newsItem['title'], $found['title']);
    }
    
    public function testClear()
    {
        // Primeiro insere alguns dados
        $this->repository->save([
            'title' => 'Teste 1',
            'url' => 'https://teste.com/1',
            'source' => 'G1'
        ]);
        
        $this->repository->save([
            'title' => 'Teste 2',
            'url' => 'https://teste.com/2',
            'source' => 'UOL'
        ]);
        
        // Verifica que foram inseridos
        $allNews = $this->repository->getAll();
        $this->assertCount(2, $allNews);
        
        // Limpa
        $result = $this->repository->clear();
        $this->assertTrue($result);
        
        // Verifica que foram removidos
        $allNews = $this->repository->getAll();
        $this->assertCount(0, $allNews);
    }
    
    protected function tearDown(): void
    {
        $this->repository->clear();
        parent::tearDown();
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Scrapers\G1ScraperTest.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Scrapers\G1ScraperTest.php

namespace Tests\Scrapers;

use App\Models\G1Scraper;
use Tests\TestCase;
use App\Cache\FileCache;

class G1ScraperTest extends TestCase
{
    private $scraper;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Configurar um cache de teste
        $testCache = new FileCache([
            'directory' => __DIR__ . '/../temp/',
            'prefix' => 'test_'
        ]);
        
        // Substituir a função global getCache para retornar nosso cache de teste
        global $testCacheInstance;
        $testCacheInstance = $testCache;
        
        if (!function_exists('getCache')) {
            function getCache() {
                global $testCacheInstance;
                return $testCacheInstance;
            }
        }
        
        $this->scraper = new G1Scraper();
    }
    
    public function testScrapeArticle()
    {
        // Carregar HTML de teste
        $html = $this->loadTestHtml('g1_sample.html');
        
        // Mock do HttpClient para retornar o HTML de teste
        $this->mockHttpClient($html);
        
        // Usar reflexão para acessar o método privado scrapeArticle
        $reflection = new \ReflectionClass($this->scraper);
        $method = $reflection->getMethod('scrapeArticle');
        $method->setAccessible(true);
        
        // Chamar o método privado com os parâmetros necessários
        $result = $method->invokeArgs($this->scraper, ['https://teste.com', []]);
        
        // Verificar se os dados foram extraídos corretamente
        $this->assertIsArray($result);
        $this->assertEquals('Título da notícia de teste G1', $result['title']);
        $this->assertEquals('Descrição de exemplo para teste', $result['description']);
        $this->assertEquals('João Silva', $result['author']);
        $this->assertEquals('2025-04-12T10:30:00-03:00', $result['publishedAt']);
        $this->assertEquals('G1', $result['source']);
    }
    
    protected function tearDown(): void
    {
        \Mockery::close();
        parent::tearDown();
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Scrapers\UOLScraperTest.php
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\Scrapers\UOLScraperTest.php

namespace Tests\Scrapers;

use App\Models\UOLScraper;
use Tests\TestCase;
use App\Cache\FileCache;

class UOLScraperTest extends TestCase
{
    private $scraper;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Configurar um cache de teste
        $testCache = new FileCache([
            'directory' => __DIR__ . '/../temp/',
            'prefix' => 'test_'
        ]);
        
        // Substituir a função global getCache
        global $testCacheInstance;
        $testCacheInstance = $testCache;
        
        $this->scraper = new UOLScraper();
    }
    
    public function testScrapeArticle()
    {
        // Carregar HTML de teste
        $html = $this->loadTestHtml('uol_sample.html');
        
        // Mock do HttpClient para retornar o HTML de teste
        $this->mockHttpClient($html);
        
        // Usar reflexão para acessar o método privado scrapeArticle
        $reflection = new \ReflectionClass($this->scraper);
        $method = $reflection->getMethod('scrapeArticle');
        $method->setAccessible(true);
        
        // Chamar o método privado
        $result = $method->invokeArgs($this->scraper, ['https://teste.com', []]);
        
        // Verificar os resultados
        $this->assertIsArray($result);
        $this->assertEquals('Este é o primeiro parágrafo da notícia de teste.', $result['description']);
        $this->assertEquals('Maria Santos', $result['author']);
        $this->assertEquals('2025-04-12T11:15:00-03:00', $result['publishedAt']);
    }
    
    protected function tearDown(): void
    {
        \Mockery::close();
        parent::tearDown();
    }
}

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\folha_sample.html
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\folha_sample.html
?>
<!DOCTYPE html>
<html>
<body>
    <div class="c-news__wrap">
        <div class="c-signature">
            <strong class="c-signature__author">
                <a href="#">Pedro Oliveira</a>
            </strong>
        </div>
    </div>
    <h1 class="c-content-head__title">Título de teste da Folha</h1>
</body>
</html>

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\g1_sample.html
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\g1_sample.html
?>
<!DOCTYPE html>
<html>
<body>
    <div class="mc-article-header">
        <h1 itemprop="headline">Título da notícia de teste G1</h1>
        <h2 class="content-head__subtitle" itemprop="alternativeHeadline">Descrição de exemplo para teste</h2>
        <time itemprop="datePublished" datetime="2025-04-12T10:30:00-03:00">12/04/2025 10:30</time>
        <p class="content-publication-data__from">
            <a href="#">João Silva</a>
        </p>
    </div>
</body>
</html>

================================================================================
Arquivo: C:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\uol_sample.html
================================================================================

<?php
// filepath: c:\Users\alexa\OneDrive\Área de Trabalho\sistema-noticias\tests\TestData\uol_sample.html
?>
<!DOCTYPE html>
<html>
<body>
    <div class="jupiter-paragraph-fragment">
        <p>Este é o primeiro parágrafo da notícia de teste.</p>
        <p>Este é o segundo parágrafo da notícia de teste.</p>
    </div>
    <div class="solar-author-names">
        <a class="solar-author-name">Maria Santos</a>
    </div>
    <div class="solar-date">
        <time class="date" datetime="2025-04-12T11:15:00-03:00">12/04/2025 11:15</time>
    </div>
</body>
</html>

